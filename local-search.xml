<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>海康BSP嵌入式开发实习面试经验</title>
    <link href="/2025/04/15/hello-world/"/>
    <url>/2025/04/15/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="✅-IIC启动流程"><a href="#✅-IIC启动流程" class="headerlink" title="✅ IIC启动流程"></a>✅ IIC启动流程</h1><h2 id="I2C-启动流程概述"><a href="#I2C-启动流程概述" class="headerlink" title="I2C 启动流程概述"></a>I2C 启动流程概述</h2><ol><li><p><strong>总线空闲状态</strong>：<br>在通信开始之前，I2C总线处于空闲状态，即SDA和SCL线都处于高电平。</p></li><li><p><strong>发送启动信号（START）</strong>：<br>主设备在SCL线为高电平时，将SDA线从高电平拉低，形成启动信号。这一过程标志着通信的开始。</p></li><li><p><strong>发送设备地址和读写位</strong>：<br>启动信号后，主设备发送目标设备的地址（通常为7位）和读写位。读写位为0表示写操作，为1表示读操作。</p></li><li><p><strong>等待应答信号（ACK）</strong>：<br>从设备接收到地址和读写位后，返回一个应答信号（ACK）。如果从设备未响应，主设备可以根据需要进行重试或处理错误。</p></li><li><p><strong>数据传输</strong>：<br>主设备根据读写位的设置，开始与从设备进行数据的读写操作。每传输一个字节后，接收方返回一个应答信号。</p></li><li><p><strong>发送停止信号（STOP）</strong>：<br>数据传输完成后，主设备在SCL线为高电平时，将SDA线从低电平拉高，形成停止信号，标志着通信的结束。</p></li></ol><p>🔹 <strong>特别注意</strong>：<br>IIC信号在数据传输过程中，当<code>SCL=1</code>（高电平）时，数据线<code>SDA</code>必须保持稳定状态，不允许有电平跳变。只有在<code>SCL</code>为低电平期间，<code>SDA</code>的电平状态才允许变化。</p><hr><h1 id="✅-C语言关键字"><a href="#✅-C语言关键字" class="headerlink" title="✅ C语言关键字"></a>✅ C语言关键字</h1><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>🔹 <strong>防止编译器优化</strong>：<br>编译器可能会将变量存储在寄存器中以提高访问效率。但如果该变量的值可能被外部因素（如硬件中断、其他线程或外部设备）改变，使用<code>volatile</code>修饰的变量会强制编译器每次从内存中读取最新值。</p><p>🔹 <strong>保证顺序性</strong>：<br><code>volatile</code>修饰的变量的读写操作不会被编译器重排序，确保操作顺序与源代码一致。</p><p>🔹 <strong>硬件寄存器访问</strong>：<br>在嵌入式系统中，直接访问硬件寄存器时，使用<code>volatile</code>可确保每次访问都读取硬件的最新值。</p><p>🔹 <strong>中断服务例程（ISR）</strong>：<br>中断处理程序修改的变量需用<code>volatile</code>修饰，确保主程序读取最新值。</p><p>🔹 <strong>多线程编程</strong>：<br>多线程环境中，<code>volatile</code>可确保线程间变量的可见性（但需注意它不保证原子性）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">interrupt_handler</span><span class="hljs-params">()</span> &#123;<br>    flag = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 中断服务程序修改 flag 的值</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span> (!flag) &#123;<br>        <span class="hljs-comment">// 等待中断处理程序将 flag 设置为 1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，flag 被 volatile 修饰，确保主程序每次访问 flag 时都从内存中读取其最新值，而非使用寄存器缓存的值。</p><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>🔹 <strong>修饰局部变量：保持变量的持久性</strong><br>当 static 用于修饰局部变量时，该变量的生命周期将持续整个程序运行期间，但其作用域仍限于定义它的函数内部。​这意味着变量在函数调用之间保持其值，而不是每次调用时重新初始化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">count_calls</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Function called %d times\n&quot;</span>, ++count);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    count_calls();<br>    count_calls();<br>    count_calls();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">Function called <span class="hljs-number">1</span> times<br>Function called <span class="hljs-number">2</span> times<br>Function called <span class="hljs-number">3</span> times<br><br></code></pre></td></tr></table></figure><p>在上述代码中，count 变量在函数 count_calls 的多次调用之间保持其值，实现了对函数调用次数的统计。</p><p>🔹 <strong>修饰全局变量和函数：限制作用域</strong><br>当 static 用于修饰全局变量或函数时，它将限制该变量或函数的作用域仅限于定义它的源文件（即翻译单元）。​这意味着其他源文件无法通过 extern 关键字访问这些变量或函数，从而避免了命名冲突。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// file1.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> secret = <span class="hljs-number">42</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">show_secret</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The secret is %d\n&quot;</span>, secret);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    show_secret();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在另一个源文件中，尝试访问 secret 或 show_secret 将导致链接错误，因为它们的作用域被限制在 file1.c 中。</p><p>🔹 <strong>修饰类成员（C++）：实现类级别的共享</strong><br>在 C++ 中，static 可以用于修饰类的成员变量和成员函数，使其成为类级别的成员，而非实例级别的成员。​这意味着所有类的实例共享同一份静态成员。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// file1.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> &#123;</span><br>public:<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> count;<br><br>    Counter() &#123;<br>        ++count;<br>    &#125;<br>&#125;;<br><br><span class="hljs-type">int</span> Counter::count = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    Counter a;<br>    Counter b;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Number of Counter instances: &quot;</span> &lt;&lt; Counter::count &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">Number of Counter instances: <span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure><p>在上述代码中，count 是一个静态成员变量，所有 Counter 类的实例共享同一份 count 变量。</p><p>🔹 <strong>修饰函数参数（C99）：指定数组的最小大小</strong></p><h2 id="在-C99-标准中，static-可以用于修饰函数参数，指定数组参数的最小大小。​这有助于编译器进行更严格的类型检查。在上述代码中，data-参数被声明为至少包含-10-个元素的数组，编译器将检查传递给-process-data-函数的数组是否满足这一要求。"><a href="#在-C99-标准中，static-可以用于修饰函数参数，指定数组参数的最小大小。​这有助于编译器进行更严格的类型检查。在上述代码中，data-参数被声明为至少包含-10-个元素的数组，编译器将检查传递给-process-data-函数的数组是否满足这一要求。" class="headerlink" title="在 C99 标准中，static 可以用于修饰函数参数，指定数组参数的最小大小。​这有助于编译器进行更严格的类型检查。在上述代码中，data 参数被声明为至少包含 10 个元素的数组，编译器将检查传递给 process_data 函数的数组是否满足这一要求。"></a>在 C99 标准中，static 可以用于修饰函数参数，指定数组参数的最小大小。​这有助于编译器进行更严格的类型检查。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">process_data</span><span class="hljs-params">(<span class="hljs-type">int</span> data[<span class="hljs-type">static</span> <span class="hljs-number">10</span>])</span> &#123;<br>    <span class="hljs-comment">// 处理数据</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    process_data(arr);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><br>在上述代码中，data 参数被声明为至少包含 10 个元素的数组，编译器将检查传递给 process_data 函数的数组是否满足这一要求。</h2><h1 id="✅-C语言编程题"><a href="#✅-C语言编程题" class="headerlink" title="✅ C语言编程题"></a>✅ C语言编程题</h1><h2 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h2><p>以下两个结构体分别占用多少内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> &#123;</span><br>    <span class="hljs-type">int</span> no;       <span class="hljs-comment">//学号</span><br>    <span class="hljs-type">char</span> name;    <span class="hljs-comment">//姓名</span><br>    <span class="hljs-type">short</span> sex;    <span class="hljs-comment">//性别   </span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">teach</span> &#123;</span><br>    <span class="hljs-type">char</span> no;       <span class="hljs-comment">//学号</span><br>    <span class="hljs-type">int</span> name;    <span class="hljs-comment">//姓名</span><br>    <span class="hljs-type">short</span> sex;    <span class="hljs-comment">//性别</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><p>🔹 <strong>student内存布局分析</strong><br>no（int）：占 0-3 字节（对齐到 4 字节）。</p><p>name（char）：占 4 字节（对齐到 1 字节，无需填充）。</p><p>sex（short）：需要对齐到 2 字节，所以必须在地址 6 开始（因为地址 5 未对齐到 2）。因此，在 name（地址 4）后插入 1 字节填充（地址 5）。sex 占 6-7 字节。</p><p>总大小：0-7 共 8 字节，且 8 是最大成员 int（4 字节）的整数倍，无需末尾填充。</p><p>🔹 <strong>teach内存布局分析</strong><br>no（char）：占 0 字节（对齐到 1 字节）。</p><p>name（int）：需要对齐到 4 字节，所以必须在地址 4 开始。因此：在 no（地址 0）后插入 3 字节填充（地址 1-3）。name 占 4-7 字节。</p><p>sex（short）：占 8-9 字节（对齐到 2 字节，地址 8 已对齐）。</p><h2 id="总大小：当前已用-0-9-共-10-字节，但结构体总大小必须是最大成员-int（4-字节）的整数倍。因此，在-sex（地址-9）后插入-2-字节填充（地址-10-11），使总大小为-12-字节（12-是-4-的倍数）。-malloc（记不太清了，感觉不会这么简单）以下代码输出结果输出-result-12345"><a href="#总大小：当前已用-0-9-共-10-字节，但结构体总大小必须是最大成员-int（4-字节）的整数倍。因此，在-sex（地址-9）后插入-2-字节填充（地址-10-11），使总大小为-12-字节（12-是-4-的倍数）。-malloc（记不太清了，感觉不会这么简单）以下代码输出结果输出-result-12345" class="headerlink" title="总大小：当前已用 0-9 共 10 字节，但结构体总大小必须是最大成员 int（4 字节）的整数倍。因此，在 sex（地址 9）后插入 2 字节填充（地址 10-11），使总大小为 12 字节（12 是 4 的倍数）。## malloc（记不太清了，感觉不会这么简单）以下代码输出结果输出 result &#x3D;12345"></a>总大小：当前已用 0-9 共 10 字节，但结构体总大小必须是最大成员 int（4 字节）的整数倍。因此，在 sex（地址 9）后插入 2 字节填充（地址 10-11），使总大小为 12 字节（12 是 4 的倍数）。<br>## malloc（记不太清了，感觉不会这么简单）<br>以下代码输出结果<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-keyword">if</span> (p== <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Memory allocation failed\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//返回非零值表示错误</span><br>&#125;<br>*p= <span class="hljs-number">12345</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;result = %d\n&quot;</span>, *p);<br><span class="hljs-built_in">free</span>（p);<span class="hljs-comment">//使用完毕后释放内存</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><br>输出 result &#x3D;12345</h2><h1 id="✅-FreeRTOS任务调度"><a href="#✅-FreeRTOS任务调度" class="headerlink" title="✅ FreeRTOS任务调度"></a>✅ FreeRTOS任务调度</h1><h2 id="FreeRTOS是怎么进行调度的"><a href="#FreeRTOS是怎么进行调度的" class="headerlink" title="FreeRTOS是怎么进行调度的"></a>FreeRTOS是怎么进行调度的</h2><p>FreeRTOS 的任务调度遵循优先级调度的原则，其中高优先级的任务优先执行。当任务调度器决定哪个任务运行时，它会选择优先级最高的就绪任务。<br>任务优先级<br>每个任务都具有一个优先级，优先级数值较大的任务优先级较高。任务的优先级是在创建任务时指定的，可以在运行时通过 vTaskPrioritySet() 函数动态修改任务的优先级。<br>调度器行为<br>🔹 <strong>抢占式调度</strong><br>如果高优先级任务变为就绪状态，调度器会立即中断当前正在运行的低优先级任务，切换到高优先级任务执行。<br>🔹 <strong>协作式调度</strong><br>任务在执行时不会被抢占，除非它显式地调用 taskYIELD() 或其他类似的 API 来让出 CPU 给其他任务。<br>FreeRTOS 中，任务可以通过时间片轮转的方式调度，除非某个任务被标记为“挂起”或“阻塞”，此时它不会被调度。</p><h2 id="高优先级任务一直运行会不会霸占CPU资源"><a href="#高优先级任务一直运行会不会霸占CPU资源" class="headerlink" title="高优先级任务一直运行会不会霸占CPU资源"></a>高优先级任务一直运行会不会霸占CPU资源</h2><p>如果 FreeRTOS 中的高优先级任务长时间占用 CPU 而不主动让出控制权，低优先级任务将无法获得执行机会，导致 CPU 资源被高优先级任务“霸占”。​<br>🔹 <strong>为什么高优先级任务会“霸占”CPU</strong>？**<br>在 FreeRTOS 中，任务调度遵循优先级原则：优先级高的任务优先执行。如果高优先级任务没有被挂起、阻塞或主动让出 CPU，它将持续占用 CPU，导致其他任务无法执行。<br>🔹 <strong>可能导致的问题</strong><br>任务饥饿：​低优先级任务长时间无法获得 CPU 时间，可能导致系统响应迟缓或实时性差。​<br>系统不稳定：​某些低优先级任务可能负责关键功能（如通信、数据采集等），长时间无法执行可能导致系统功能异常。<br>🔹 <strong>如何避免“霸占”CPU</strong><br>使用 vTaskDelay() 或 vTaskDelayUntil()：​让任务主动延时，释放 CPU 给其他任务。​<br>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">vTaskDelay(pdMS_TO_TICKS(<span class="hljs-number">10</span>));  <span class="hljs-comment">// 延时 10 毫秒</span><br><br></code></pre></td></tr></table></figure><p>使用 taskYIELD()：​在任务中适当位置调用，主动让出 CPU 给同优先级的其他任务。​<br>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">taskYIELD();  <span class="hljs-comment">// 主动让出 CPU</span><br></code></pre></td></tr></table></figure><p>合理设计任务优先级：​确保高优先级任务只处理紧急或实时性要求高的任务，其他任务使用较低优先级。​<br>使用互斥机制：​避免高优先级任务长时间占用共享资源，导致低优先级任务无法访问</p>]]></content>
    
    
    <categories>
      
      <category>[object Object]</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SPI,IIC,UART对比</title>
    <link href="/2025/04/15/20250416/"/>
    <url>/2025/04/15/20250416/</url>
    
    <content type="html"><![CDATA[<h1 id="I2C、SPI和UART串行通信协议对比"><a href="#I2C、SPI和UART串行通信协议对比" class="headerlink" title="I2C、SPI和UART串行通信协议对比"></a>I2C、SPI和UART串行通信协议对比</h1><h2 id="1-I2C通信"><a href="#1-I2C通信" class="headerlink" title="1. I2C通信"></a>1. <strong>I2C通信</strong></h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li><strong>多主机和多从机</strong>  </li><li><strong>两根线</strong>：SDA（数据线）和SCL（时钟线）  </li><li><strong>通信速率</strong>：100kbps（标准模式）至3.4Mbps（高速模式）  </li><li><strong>地址模式</strong>：7位或10位设备地址</li></ul><h3 id="通信时序："><a href="#通信时序：" class="headerlink" title="通信时序："></a>通信时序：</h3><ol><li><strong>起始信号</strong>：SDA从高电平拉低（SCL保持高电平）  </li><li><strong>设备地址</strong>：发送7位地址 + 读写位（0写&#x2F;1读）  </li><li><strong>数据传输</strong>：每字节后接收方返回ACK&#x2F;NACK  </li><li><strong>停止信号</strong>：SDA从低电平拉高（SCL保持高电平）</li></ol><h4 id="时序示例（发送0x12到地址0x50）："><a href="#时序示例（发送0x12到地址0x50）：" class="headerlink" title="时序示例（发送0x12到地址0x50）："></a>时序示例（发送<code>0x12</code>到地址<code>0x50</code>）：</h4><p>时间  0      1     2   3  4   5   6   7  8   9  10  11  12  13<br>       __    __   __  __  __  __  __  __  __  __  __  __<br>SDA  |  S  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |  1 |  0 |  P<br>        ↑    ↓     ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↓ ↑<br>SCL  —– ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑</p><ul><li><strong>S</strong>：起始条件  </li><li><strong>P</strong>：停止条件</li></ul><h3 id="初始化步骤："><a href="#初始化步骤：" class="headerlink" title="初始化步骤："></a>初始化步骤：</h3><ol><li>配置SDA和SCL为推挽输出  </li><li>设置时钟频率（如100kHz）  </li><li>配置设备地址和读&#x2F;写模式</li></ol><hr><h2 id="2-SPI通信"><a href="#2-SPI通信" class="headerlink" title="2. SPI通信"></a>2. <strong>SPI通信</strong></h2><h3 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h3><ul><li><strong>全双工通信</strong>  </li><li><strong>四根线</strong>：MISO、MOSI、SCLK、SS  </li><li><strong>速率</strong>：可达几Mbps  </li><li><strong>时钟控制</strong>：主设备生成时钟</li></ul><h3 id="通信时序：-1"><a href="#通信时序：-1" class="headerlink" title="通信时序："></a>通信时序：</h3><ol><li><strong>起始</strong>：SS拉低选择从机  </li><li><strong>时钟同步</strong>：SCLK由主机控制（CPOL&#x2F;CPHA配置边沿）  </li><li><strong>数据传输</strong>：MOSI发送数据，MISO接收数据  </li><li><strong>停止</strong>：SS拉高</li></ol><h4 id="时序示例（发送0x12，CPOL-0-CPHA-0）："><a href="#时序示例（发送0x12，CPOL-0-CPHA-0）：" class="headerlink" title="时序示例（发送0x12，CPOL&#x3D;0, CPHA&#x3D;0）："></a>时序示例（发送<code>0x12</code>，CPOL&#x3D;0, CPHA&#x3D;0）：</h4><p>时间  0    1  2  3  4   5   6   7   8   9   10<br>SCLK  –|–|–|–|–|–|–|–|–|–|–|–<br>MOSI   | 0  1  0  0  1  0  0  1  0  1 | (发送数据)<br>MISO   |     |  (接收数据)<br>SS     |—|——————–|—|  (选择从机)</p><ul><li>数据在SCLK上升沿采样</li></ul><h3 id="初始化步骤：-1"><a href="#初始化步骤：-1" class="headerlink" title="初始化步骤："></a>初始化步骤：</h3><ol><li>配置MISO&#x2F;MOSI&#x2F;SCLK&#x2F;SS引脚  </li><li>设置CPOL、CPHA、数据位数和速率  </li><li>定义主&#x2F;从模式</li></ol><hr><h2 id="3-UART通信"><a href="#3-UART通信" class="headerlink" title="3. UART通信"></a>3. <strong>UART通信</strong></h2><h3 id="特点：-2"><a href="#特点：-2" class="headerlink" title="特点："></a>特点：</h3><ul><li><strong>异步通信</strong>  </li><li><strong>两根线</strong>：TX（发送）和RX（接收）  </li><li><strong>速率</strong>：常见9600bps~115200bps</li></ul><h3 id="通信时序：-2"><a href="#通信时序：-2" class="headerlink" title="通信时序："></a>通信时序：</h3><ol><li><strong>起始位</strong>：TX从高电平拉低  </li><li><strong>数据位</strong>：传输8位数据（LSB优先）  </li><li><strong>停止位</strong>：TX恢复高电平</li></ol><h4 id="时序示例（发送0x12）："><a href="#时序示例（发送0x12）：" class="headerlink" title="时序示例（发送0x12）："></a>时序示例（发送<code>0x12</code>）：</h4><p>时间  0   1   2   3   4   5   6   7   8   9   10  11<br>TX    ↓  1   0   0   0   1   0   0   1   0   1   ↑ (停止位)</p><ul><li>起始位（低）→ 数据位（<code>0x12</code>&#x3D; <code>00010010</code>）→ 停止位（高）</li></ul><h3 id="初始化步骤：-2"><a href="#初始化步骤：-2" class="headerlink" title="初始化步骤："></a>初始化步骤：</h3><ol><li>配置TX&#x2F;RX引脚  </li><li>设置波特率、数据位、校验位和停止位</li></ol><hr><h2 id="4-对比总结"><a href="#4-对比总结" class="headerlink" title="4. 对比总结"></a>4. <strong>对比总结</strong></h2><table><thead><tr><th>特性</th><th>I2C</th><th>SPI</th><th>UART</th></tr></thead><tbody><tr><td><strong>线数</strong></td><td>2（SDA, SCL）</td><td>4（MISO, MOSI, SCLK, SS）</td><td>2（TX, RX）</td></tr><tr><td><strong>模式</strong></td><td>多主多从</td><td>主从全双工</td><td>异步点对点</td></tr><tr><td><strong>速率</strong></td><td>100kbps~3.4Mbps</td><td>几Mbps</td><td>9600bps~115200bps</td></tr><tr><td><strong>应用</strong></td><td>低速多设备（如传感器）</td><td>高速短距（如Flash存储器）</td><td>长距异步通信（如调试口）</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>[object Object]</category>
      
    </categories>
    
    
    <tags>
      
      <tag>裸机开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阻塞I/O笔记</title>
    <link href="/2025/04/15/20250415/"/>
    <url>/2025/04/15/20250415/</url>
    
    <content type="html"><![CDATA[<h1 id="✅-Linux-驱动中阻塞-I-O-完整流程总结"><a href="#✅-Linux-驱动中阻塞-I-O-完整流程总结" class="headerlink" title="✅ Linux 驱动中阻塞 I&#x2F;O 完整流程总结"></a>✅ Linux 驱动中阻塞 I&#x2F;O 完整流程总结</h1><hr><h2 id="📌-阶段一：初始化等待队列（设备初始化时）"><a href="#📌-阶段一：初始化等待队列（设备初始化时）" class="headerlink" title="📌 阶段一：初始化等待队列（设备初始化时）"></a>📌 阶段一：初始化等待队列（设备初始化时）</h2><p><strong>目的：</strong> 准备一个等待队列，用于后续让进程挂起&#x2F;唤醒</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">wait_queue_head_t</span> r_wait;               <span class="hljs-comment">// 声明等待队列头</span><br>init_waitqueue_head(&amp;r_wait);           <span class="hljs-comment">// 初始化等待队列</span><br></code></pre></td></tr></table></figure><hr><h2 id="📌-阶段二：用户调用-read-，驱动开始执行阻塞流程"><a href="#📌-阶段二：用户调用-read-，驱动开始执行阻塞流程" class="headerlink" title="📌 阶段二：用户调用 read()，驱动开始执行阻塞流程"></a>📌 阶段二：用户调用 <code>read()</code>，驱动开始执行阻塞流程</h2><p><strong>目的：</strong> 如果当前设备没有准备好数据，让当前进程阻塞</p><h3 id="🔹-判断是否需要阻塞"><a href="#🔹-判断是否需要阻塞" class="headerlink" title="🔹 判断是否需要阻塞"></a>🔹 判断是否需要阻塞</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (<span class="hljs-type">atomic_read</span>(&amp;releasekey) == <span class="hljs-number">0</span>)      <span class="hljs-comment">// 判断是否有事件（数据）可读</span><br></code></pre></td></tr></table></figure><h3 id="🔹-创建等待队列项（绑定当前进程）"><a href="#🔹-创建等待队列项（绑定当前进程）" class="headerlink" title="🔹 创建等待队列项（绑定当前进程）"></a>🔹 创建等待队列项（绑定当前进程）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">DECLARE_WAITQUEUE(wait, current);       <span class="hljs-comment">// 定义一个等待队列节点，指向当前进程</span><br>add_wait_queue(&amp;r_wait, &amp;wait);         <span class="hljs-comment">// 将该节点添加到等待队列中</span><br></code></pre></td></tr></table></figure><h3 id="🔹-设置当前任务状态为“可中断睡眠”"><a href="#🔹-设置当前任务状态为“可中断睡眠”" class="headerlink" title="🔹 设置当前任务状态为“可中断睡眠”"></a>🔹 设置当前任务状态为“可中断睡眠”</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">__set_current_state(TASK_INTERRUPTIBLE); <span class="hljs-comment">// 表示愿意进入睡眠状态</span><br></code></pre></td></tr></table></figure><h3 id="🔹-真正进入阻塞，放弃-CPU-控制权"><a href="#🔹-真正进入阻塞，放弃-CPU-控制权" class="headerlink" title="🔹 真正进入阻塞，放弃 CPU 控制权"></a>🔹 真正进入阻塞，放弃 CPU 控制权</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">schedule();                              <span class="hljs-comment">// 进程挂起，直到被唤醒（阻塞点）</span><br></code></pre></td></tr></table></figure><hr><h2 id="📌-阶段三：外部事件发生，驱动准备唤醒阻塞进程"><a href="#📌-阶段三：外部事件发生，驱动准备唤醒阻塞进程" class="headerlink" title="📌 阶段三：外部事件发生，驱动准备唤醒阻塞进程"></a>📌 阶段三：外部事件发生，驱动准备唤醒阻塞进程</h2><p><strong>目的：</strong> 在事件发生时唤醒之前阻塞的 <code>read()</code></p><h3 id="🔹-外部中断触发（如按键中断）"><a href="#🔹-外部中断触发（如按键中断）" class="headerlink" title="🔹 外部中断触发（如按键中断）"></a>🔹 外部中断触发（如按键中断）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">irqreturn_t</span> <span class="hljs-title function_">key0_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> irq, <span class="hljs-type">void</span> *dev_id)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">imx6uirq_dev</span> *<span class="hljs-title">dev</span> =</span> (<span class="hljs-keyword">struct</span> imx6uirq_dev *)dev_id;<br>    dev-&gt;curkeynum = <span class="hljs-number">0</span>;<br>    dev-&gt;timer.data = (<span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span>)dev_id;<br>    mod_timer(&amp;dev-&gt;timer, jiffies + msecs_to_jiffies(<span class="hljs-number">10</span>));<br>    <span class="hljs-keyword">return</span> IRQ_HANDLED;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="🔹-定时器超时，进入回调函数"><a href="#🔹-定时器超时，进入回调函数" class="headerlink" title="🔹 定时器超时，进入回调函数"></a>🔹 定时器超时，进入回调函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">timer_function</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">imx6uirq_dev</span> *<span class="hljs-title">dev</span> =</span> (<span class="hljs-keyword">struct</span> imx6uirq_dev *)arg;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">irq_keydesc</span> *<span class="hljs-title">keydesc</span> =</span> &amp;dev-&gt;irqkeydesc[dev-&gt;curkeynum];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> value = gpio_get_value(keydesc-&gt;gpio);<br><br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;keyvalue, keydesc-&gt;value2);  <span class="hljs-comment">// 按下</span><br>        <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;releasekey, <span class="hljs-number">2</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;keyvalue, <span class="hljs-number">0x80</span> | keydesc-&gt;value);  <span class="hljs-comment">// 释放</span><br>        <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;releasekey, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-type">atomic_read</span>(&amp;dev-&gt;releasekey)) &#123;<br>        wake_up_interruptible(&amp;dev-&gt;r_wait);  <span class="hljs-comment">// 唤醒等待队列</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="📌-阶段四：read-被唤醒后，恢复执行并读取数据"><a href="#📌-阶段四：read-被唤醒后，恢复执行并读取数据" class="headerlink" title="📌 阶段四：read()被唤醒后，恢复执行并读取数据"></a>📌 阶段四：<code>read()</code>被唤醒后，恢复执行并读取数据</h2><p><strong>目的：</strong> 被唤醒后完成数据读取并返回用户空间</p><h3 id="🔹-被唤醒-→-判断是否是信号中断"><a href="#🔹-被唤醒-→-判断是否是信号中断" class="headerlink" title="🔹 被唤醒 → 判断是否是信号中断"></a>🔹 被唤醒 → 判断是否是信号中断</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (signal_pending(current)) &#123;<br>    ret = -ERESTARTSYS;<br>    <span class="hljs-keyword">goto</span> wait_error;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="🔹-恢复进程状态-→-从睡眠状态转为运行"><a href="#🔹-恢复进程状态-→-从睡眠状态转为运行" class="headerlink" title="🔹 恢复进程状态 → 从睡眠状态转为运行"></a>🔹 恢复进程状态 → 从睡眠状态转为运行</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">__set_current_state(TASK_RUNNING);<br>remove_wait_queue(&amp;r_wait, &amp;wait);<br></code></pre></td></tr></table></figure><h3 id="🔹-拷贝数据返回给用户"><a href="#🔹-拷贝数据返回给用户" class="headerlink" title="🔹 拷贝数据返回给用户"></a>🔹 拷贝数据返回给用户</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">keyvalue = <span class="hljs-type">atomic_read</span>(&amp;dev-&gt;keyvalue);<br>releasekey = <span class="hljs-type">atomic_read</span>(&amp;dev-&gt;releasekey);<br><br><span class="hljs-keyword">if</span> (releasekey == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">if</span> (keyvalue &amp; <span class="hljs-number">0x80</span>) &#123;<br>        keyvalue &amp;= ~<span class="hljs-number">0x80</span>;<br>        ret = copy_to_user(buf, &amp;keyvalue, <span class="hljs-keyword">sizeof</span>(keyvalue));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">goto</span> data_error;<br>    &#125;<br>    <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;releasekey, <span class="hljs-number">0</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (releasekey == <span class="hljs-number">2</span>) &#123;<br>    ret = copy_to_user(buf, &amp;keyvalue, <span class="hljs-keyword">sizeof</span>(keyvalue));<br>    <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;releasekey, <span class="hljs-number">0</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">goto</span> data_error;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="✅-补充概念说明（简洁版）"><a href="#✅-补充概念说明（简洁版）" class="headerlink" title="✅ 补充概念说明（简洁版）"></a>✅ 补充概念说明（简洁版）</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><code>wait_queue_head_t</code></td><td>等待队列头，管理一批阻塞任务</td></tr><tr><td><code>DECLARE_WAITQUEUE()</code></td><td>创建等待队列节点，指向当前进程（<code>current</code>）</td></tr><tr><td><code>add_wait_queue()</code></td><td>把节点挂到等待队列上</td></tr><tr><td><code>__set_current_state()</code></td><td>设置当前进程状态为 <code>TASK_INTERRUPTIBLE</code> 等待唤醒</td></tr><tr><td><code>schedule()</code></td><td>阻塞当前任务，进入睡眠，等待被唤醒</td></tr><tr><td><code>wake_up_interruptible()</code></td><td>唤醒队列中所有处于“可中断睡眠”的任务</td></tr></tbody></table><hr><h2 id="✅-一句话总结流程"><a href="#✅-一句话总结流程" class="headerlink" title="✅ 一句话总结流程"></a>✅ 一句话总结流程</h2><blockquote><p>用户态调用 <code>read()</code> → 驱动进入阻塞 → 外部中断触发定时器 → 定时器中唤醒任务 → <code>read()</code> 恢复执行，返回按键值。<br>&#96;&#96;&#96;</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>[object Object]</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Linux driver</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
