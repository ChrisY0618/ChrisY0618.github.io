<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SPI,IIC,UART对比</title>
    <link href="/2025/04/15/20250416/"/>
    <url>/2025/04/15/20250416/</url>
    
    <content type="html"><![CDATA[<h1 id="I2C、SPI和UART串行通信协议对比"><a href="#I2C、SPI和UART串行通信协议对比" class="headerlink" title="I2C、SPI和UART串行通信协议对比"></a>I2C、SPI和UART串行通信协议对比</h1><h2 id="1-I2C通信"><a href="#1-I2C通信" class="headerlink" title="1. I2C通信"></a>1. <strong>I2C通信</strong></h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li><strong>多主机和多从机</strong>  </li><li><strong>两根线</strong>：SDA（数据线）和SCL（时钟线）  </li><li><strong>通信速率</strong>：100kbps（标准模式）至3.4Mbps（高速模式）  </li><li><strong>地址模式</strong>：7位或10位设备地址</li></ul><h3 id="通信时序："><a href="#通信时序：" class="headerlink" title="通信时序："></a>通信时序：</h3><ol><li><strong>起始信号</strong>：SDA从高电平拉低（SCL保持高电平）  </li><li><strong>设备地址</strong>：发送7位地址 + 读写位（0写&#x2F;1读）  </li><li><strong>数据传输</strong>：每字节后接收方返回ACK&#x2F;NACK  </li><li><strong>停止信号</strong>：SDA从低电平拉高（SCL保持高电平）</li></ol><h4 id="时序示例（发送0x12到地址0x50）："><a href="#时序示例（发送0x12到地址0x50）：" class="headerlink" title="时序示例（发送0x12到地址0x50）："></a>时序示例（发送<code>0x12</code>到地址<code>0x50</code>）：</h4><p>时间  0      1     2   3  4   5   6   7  8   9  10  11  12  13<br>       __    __   __  __  __  __  __  __  __  __  __  __<br>SDA  |  S  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |  1 |  0 |  P<br>        ↑    ↓     ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↓ ↑<br>SCL  —– ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑</p><ul><li><strong>S</strong>：起始条件  </li><li><strong>P</strong>：停止条件</li></ul><h3 id="初始化步骤："><a href="#初始化步骤：" class="headerlink" title="初始化步骤："></a>初始化步骤：</h3><ol><li>配置SDA和SCL为推挽输出  </li><li>设置时钟频率（如100kHz）  </li><li>配置设备地址和读&#x2F;写模式</li></ol><hr><h2 id="2-SPI通信"><a href="#2-SPI通信" class="headerlink" title="2. SPI通信"></a>2. <strong>SPI通信</strong></h2><h3 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h3><ul><li><strong>全双工通信</strong>  </li><li><strong>四根线</strong>：MISO、MOSI、SCLK、SS  </li><li><strong>速率</strong>：可达几Mbps  </li><li><strong>时钟控制</strong>：主设备生成时钟</li></ul><h3 id="通信时序：-1"><a href="#通信时序：-1" class="headerlink" title="通信时序："></a>通信时序：</h3><ol><li><strong>起始</strong>：SS拉低选择从机  </li><li><strong>时钟同步</strong>：SCLK由主机控制（CPOL&#x2F;CPHA配置边沿）  </li><li><strong>数据传输</strong>：MOSI发送数据，MISO接收数据  </li><li><strong>停止</strong>：SS拉高</li></ol><h4 id="时序示例（发送0x12，CPOL-0-CPHA-0）："><a href="#时序示例（发送0x12，CPOL-0-CPHA-0）：" class="headerlink" title="时序示例（发送0x12，CPOL&#x3D;0, CPHA&#x3D;0）："></a>时序示例（发送<code>0x12</code>，CPOL&#x3D;0, CPHA&#x3D;0）：</h4><p>时间  0    1  2  3  4   5   6   7   8   9   10<br>SCLK  –|–|–|–|–|–|–|–|–|–|–|–<br>MOSI   | 0  1  0  0  1  0  0  1  0  1 | (发送数据)<br>MISO   |     |  (接收数据)<br>SS     |—|——————–|—|  (选择从机)</p><ul><li>数据在SCLK上升沿采样</li></ul><h3 id="初始化步骤：-1"><a href="#初始化步骤：-1" class="headerlink" title="初始化步骤："></a>初始化步骤：</h3><ol><li>配置MISO&#x2F;MOSI&#x2F;SCLK&#x2F;SS引脚  </li><li>设置CPOL、CPHA、数据位数和速率  </li><li>定义主&#x2F;从模式</li></ol><hr><h2 id="3-UART通信"><a href="#3-UART通信" class="headerlink" title="3. UART通信"></a>3. <strong>UART通信</strong></h2><h3 id="特点：-2"><a href="#特点：-2" class="headerlink" title="特点："></a>特点：</h3><ul><li><strong>异步通信</strong>  </li><li><strong>两根线</strong>：TX（发送）和RX（接收）  </li><li><strong>速率</strong>：常见9600bps~115200bps</li></ul><h3 id="通信时序：-2"><a href="#通信时序：-2" class="headerlink" title="通信时序："></a>通信时序：</h3><ol><li><strong>起始位</strong>：TX从高电平拉低  </li><li><strong>数据位</strong>：传输8位数据（LSB优先）  </li><li><strong>停止位</strong>：TX恢复高电平</li></ol><h4 id="时序示例（发送0x12）："><a href="#时序示例（发送0x12）：" class="headerlink" title="时序示例（发送0x12）："></a>时序示例（发送<code>0x12</code>）：</h4><p>时间  0   1   2   3   4   5   6   7   8   9   10  11<br>TX    ↓  1   0   0   0   1   0   0   1   0   1   ↑ (停止位)</p><ul><li>起始位（低）→ 数据位（<code>0x12</code>&#x3D; <code>00010010</code>）→ 停止位（高）</li></ul><h3 id="初始化步骤：-2"><a href="#初始化步骤：-2" class="headerlink" title="初始化步骤："></a>初始化步骤：</h3><ol><li>配置TX&#x2F;RX引脚  </li><li>设置波特率、数据位、校验位和停止位</li></ol><hr><h2 id="4-对比总结"><a href="#4-对比总结" class="headerlink" title="4. 对比总结"></a>4. <strong>对比总结</strong></h2><table><thead><tr><th>特性</th><th>I2C</th><th>SPI</th><th>UART</th></tr></thead><tbody><tr><td><strong>线数</strong></td><td>2（SDA, SCL）</td><td>4（MISO, MOSI, SCLK, SS）</td><td>2（TX, RX）</td></tr><tr><td><strong>模式</strong></td><td>多主多从</td><td>主从全双工</td><td>异步点对点</td></tr><tr><td><strong>速率</strong></td><td>100kbps~3.4Mbps</td><td>几Mbps</td><td>9600bps~115200bps</td></tr><tr><td><strong>应用</strong></td><td>低速多设备（如传感器）</td><td>高速短距（如Flash存储器）</td><td>长距异步通信（如调试口）</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>[object Object]</category>
      
    </categories>
    
    
    <tags>
      
      <tag>裸机开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阻塞I/O笔记</title>
    <link href="/2025/04/15/20250415/"/>
    <url>/2025/04/15/20250415/</url>
    
    <content type="html"><![CDATA[<h1 id="✅-Linux-驱动中阻塞-I-O-完整流程总结"><a href="#✅-Linux-驱动中阻塞-I-O-完整流程总结" class="headerlink" title="✅ Linux 驱动中阻塞 I&#x2F;O 完整流程总结"></a>✅ Linux 驱动中阻塞 I&#x2F;O 完整流程总结</h1><hr><h2 id="📌-阶段一：初始化等待队列（设备初始化时）"><a href="#📌-阶段一：初始化等待队列（设备初始化时）" class="headerlink" title="📌 阶段一：初始化等待队列（设备初始化时）"></a>📌 阶段一：初始化等待队列（设备初始化时）</h2><p><strong>目的：</strong> 准备一个等待队列，用于后续让进程挂起&#x2F;唤醒</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">wait_queue_head_t</span> r_wait;               <span class="hljs-comment">// 声明等待队列头</span><br>init_waitqueue_head(&amp;r_wait);           <span class="hljs-comment">// 初始化等待队列</span><br></code></pre></td></tr></table></figure><hr><h2 id="📌-阶段二：用户调用-read-，驱动开始执行阻塞流程"><a href="#📌-阶段二：用户调用-read-，驱动开始执行阻塞流程" class="headerlink" title="📌 阶段二：用户调用 read()，驱动开始执行阻塞流程"></a>📌 阶段二：用户调用 <code>read()</code>，驱动开始执行阻塞流程</h2><p><strong>目的：</strong> 如果当前设备没有准备好数据，让当前进程阻塞</p><h3 id="🔹-判断是否需要阻塞"><a href="#🔹-判断是否需要阻塞" class="headerlink" title="🔹 判断是否需要阻塞"></a>🔹 判断是否需要阻塞</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (<span class="hljs-type">atomic_read</span>(&amp;releasekey) == <span class="hljs-number">0</span>)      <span class="hljs-comment">// 判断是否有事件（数据）可读</span><br></code></pre></td></tr></table></figure><h3 id="🔹-创建等待队列项（绑定当前进程）"><a href="#🔹-创建等待队列项（绑定当前进程）" class="headerlink" title="🔹 创建等待队列项（绑定当前进程）"></a>🔹 创建等待队列项（绑定当前进程）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">DECLARE_WAITQUEUE(wait, current);       <span class="hljs-comment">// 定义一个等待队列节点，指向当前进程</span><br>add_wait_queue(&amp;r_wait, &amp;wait);         <span class="hljs-comment">// 将该节点添加到等待队列中</span><br></code></pre></td></tr></table></figure><h3 id="🔹-设置当前任务状态为“可中断睡眠”"><a href="#🔹-设置当前任务状态为“可中断睡眠”" class="headerlink" title="🔹 设置当前任务状态为“可中断睡眠”"></a>🔹 设置当前任务状态为“可中断睡眠”</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">__set_current_state(TASK_INTERRUPTIBLE); <span class="hljs-comment">// 表示愿意进入睡眠状态</span><br></code></pre></td></tr></table></figure><h3 id="🔹-真正进入阻塞，放弃-CPU-控制权"><a href="#🔹-真正进入阻塞，放弃-CPU-控制权" class="headerlink" title="🔹 真正进入阻塞，放弃 CPU 控制权"></a>🔹 真正进入阻塞，放弃 CPU 控制权</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">schedule();                              <span class="hljs-comment">// 进程挂起，直到被唤醒（阻塞点）</span><br></code></pre></td></tr></table></figure><hr><h2 id="📌-阶段三：外部事件发生，驱动准备唤醒阻塞进程"><a href="#📌-阶段三：外部事件发生，驱动准备唤醒阻塞进程" class="headerlink" title="📌 阶段三：外部事件发生，驱动准备唤醒阻塞进程"></a>📌 阶段三：外部事件发生，驱动准备唤醒阻塞进程</h2><p><strong>目的：</strong> 在事件发生时唤醒之前阻塞的 <code>read()</code></p><h3 id="🔹-外部中断触发（如按键中断）"><a href="#🔹-外部中断触发（如按键中断）" class="headerlink" title="🔹 外部中断触发（如按键中断）"></a>🔹 外部中断触发（如按键中断）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">irqreturn_t</span> <span class="hljs-title function_">key0_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> irq, <span class="hljs-type">void</span> *dev_id)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">imx6uirq_dev</span> *<span class="hljs-title">dev</span> =</span> (<span class="hljs-keyword">struct</span> imx6uirq_dev *)dev_id;<br>    dev-&gt;curkeynum = <span class="hljs-number">0</span>;<br>    dev-&gt;timer.data = (<span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span>)dev_id;<br>    mod_timer(&amp;dev-&gt;timer, jiffies + msecs_to_jiffies(<span class="hljs-number">10</span>));<br>    <span class="hljs-keyword">return</span> IRQ_HANDLED;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="🔹-定时器超时，进入回调函数"><a href="#🔹-定时器超时，进入回调函数" class="headerlink" title="🔹 定时器超时，进入回调函数"></a>🔹 定时器超时，进入回调函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">timer_function</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">imx6uirq_dev</span> *<span class="hljs-title">dev</span> =</span> (<span class="hljs-keyword">struct</span> imx6uirq_dev *)arg;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">irq_keydesc</span> *<span class="hljs-title">keydesc</span> =</span> &amp;dev-&gt;irqkeydesc[dev-&gt;curkeynum];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> value = gpio_get_value(keydesc-&gt;gpio);<br><br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;keyvalue, keydesc-&gt;value2);  <span class="hljs-comment">// 按下</span><br>        <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;releasekey, <span class="hljs-number">2</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;keyvalue, <span class="hljs-number">0x80</span> | keydesc-&gt;value);  <span class="hljs-comment">// 释放</span><br>        <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;releasekey, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-type">atomic_read</span>(&amp;dev-&gt;releasekey)) &#123;<br>        wake_up_interruptible(&amp;dev-&gt;r_wait);  <span class="hljs-comment">// 唤醒等待队列</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="📌-阶段四：read-被唤醒后，恢复执行并读取数据"><a href="#📌-阶段四：read-被唤醒后，恢复执行并读取数据" class="headerlink" title="📌 阶段四：read()被唤醒后，恢复执行并读取数据"></a>📌 阶段四：<code>read()</code>被唤醒后，恢复执行并读取数据</h2><p><strong>目的：</strong> 被唤醒后完成数据读取并返回用户空间</p><h3 id="🔹-被唤醒-→-判断是否是信号中断"><a href="#🔹-被唤醒-→-判断是否是信号中断" class="headerlink" title="🔹 被唤醒 → 判断是否是信号中断"></a>🔹 被唤醒 → 判断是否是信号中断</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (signal_pending(current)) &#123;<br>    ret = -ERESTARTSYS;<br>    <span class="hljs-keyword">goto</span> wait_error;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="🔹-恢复进程状态-→-从睡眠状态转为运行"><a href="#🔹-恢复进程状态-→-从睡眠状态转为运行" class="headerlink" title="🔹 恢复进程状态 → 从睡眠状态转为运行"></a>🔹 恢复进程状态 → 从睡眠状态转为运行</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">__set_current_state(TASK_RUNNING);<br>remove_wait_queue(&amp;r_wait, &amp;wait);<br></code></pre></td></tr></table></figure><h3 id="🔹-拷贝数据返回给用户"><a href="#🔹-拷贝数据返回给用户" class="headerlink" title="🔹 拷贝数据返回给用户"></a>🔹 拷贝数据返回给用户</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">keyvalue = <span class="hljs-type">atomic_read</span>(&amp;dev-&gt;keyvalue);<br>releasekey = <span class="hljs-type">atomic_read</span>(&amp;dev-&gt;releasekey);<br><br><span class="hljs-keyword">if</span> (releasekey == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">if</span> (keyvalue &amp; <span class="hljs-number">0x80</span>) &#123;<br>        keyvalue &amp;= ~<span class="hljs-number">0x80</span>;<br>        ret = copy_to_user(buf, &amp;keyvalue, <span class="hljs-keyword">sizeof</span>(keyvalue));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">goto</span> data_error;<br>    &#125;<br>    <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;releasekey, <span class="hljs-number">0</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (releasekey == <span class="hljs-number">2</span>) &#123;<br>    ret = copy_to_user(buf, &amp;keyvalue, <span class="hljs-keyword">sizeof</span>(keyvalue));<br>    <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;releasekey, <span class="hljs-number">0</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">goto</span> data_error;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="✅-补充概念说明（简洁版）"><a href="#✅-补充概念说明（简洁版）" class="headerlink" title="✅ 补充概念说明（简洁版）"></a>✅ 补充概念说明（简洁版）</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><code>wait_queue_head_t</code></td><td>等待队列头，管理一批阻塞任务</td></tr><tr><td><code>DECLARE_WAITQUEUE()</code></td><td>创建等待队列节点，指向当前进程（<code>current</code>）</td></tr><tr><td><code>add_wait_queue()</code></td><td>把节点挂到等待队列上</td></tr><tr><td><code>__set_current_state()</code></td><td>设置当前进程状态为 <code>TASK_INTERRUPTIBLE</code> 等待唤醒</td></tr><tr><td><code>schedule()</code></td><td>阻塞当前任务，进入睡眠，等待被唤醒</td></tr><tr><td><code>wake_up_interruptible()</code></td><td>唤醒队列中所有处于“可中断睡眠”的任务</td></tr></tbody></table><hr><h2 id="✅-一句话总结流程"><a href="#✅-一句话总结流程" class="headerlink" title="✅ 一句话总结流程"></a>✅ 一句话总结流程</h2><blockquote><p>用户态调用 <code>read()</code> → 驱动进入阻塞 → 外部中断触发定时器 → 定时器中唤醒任务 → <code>read()</code> 恢复执行，返回按键值。<br>&#96;&#96;&#96;</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>[object Object]</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/15/hello-world/"/>
    <url>/2025/04/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
