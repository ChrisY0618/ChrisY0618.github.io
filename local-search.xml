<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>卓驭嵌入式底软面试经验&amp;&amp;零跑BMS软件工程师</title>
    <link href="/2025/05/12/zhuoyu/"/>
    <url>/2025/05/12/zhuoyu/</url>
    
    <content type="html"><![CDATA[<h1 id="卓驭"><a href="#卓驭" class="headerlink" title="卓驭"></a>卓驭</h1><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><h2 id="1介绍项目2自己负责哪一部分的3项目当中遇到的难点以及怎么解决的4在项目当中学习到了什么"><a href="#1介绍项目2自己负责哪一部分的3项目当中遇到的难点以及怎么解决的4在项目当中学习到了什么" class="headerlink" title="1介绍项目2自己负责哪一部分的3项目当中遇到的难点以及怎么解决的4在项目当中学习到了什么"></a>1介绍项目<br>2自己负责哪一部分的<br>3项目当中遇到的难点以及怎么解决的<br>4在项目当中学习到了什么</h2><h2 id="讲一下什么是优先级反转"><a href="#讲一下什么是优先级反转" class="headerlink" title="讲一下什么是优先级反转"></a>讲一下什么是优先级反转</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>优先级反转是指：<br>一个高优先级任务等待一个被低优先级任务持有的资源，而此时中等优先级任务不断运行，导致高优先级任务无法获得资源，从而<strong>“反转”了原有的调度优先级逻辑</strong>。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><table><thead><tr><th>任务</th><th>优先级</th><th>说明</th></tr></thead><tbody><tr><td>Task_H</td><td>高</td><td>要访问共享资源 A</td></tr><tr><td>Task_M</td><td>中</td><td>与资源 A 无关，做其他事</td></tr><tr><td>Task_L</td><td>低</td><td>正在使用共享资源 A</td></tr></tbody></table><p>执行过程：<br>1.Task_L 获取了 互斥锁 Mutex_A；</p><p>2.此时 Task_H 准备运行，也要访问资源 A；</p><p>3.Task_H 被挂起，等待 Task_L 释放 Mutex；</p><p>4.在这期间，Task_M 不断运行；</p><p>5.Task_L 被饿死，不能释放 Mutex，Task_H 也永远等不到资源。</p><p>➡️ 高优先级任务 Task_H 被中优先级任务 Task_M 间接阻塞了</p><h3 id="注意情况"><a href="#注意情况" class="headerlink" title="注意情况"></a>注意情况</h3><p>在实时系统中，任务优先级的调度顺序非常关键；<br>如果高优先级任务不能及时运行，可能导致系统崩溃或硬件故障（如航天器控制、汽车安全系统）；<br>历史上最著名的案例：<br>NASA “火星探路者”号因优先级反转导致系统频繁重启</p><hr><h2 id="如果指针执行-操作，指针移动了几个字节"><a href="#如果指针执行-操作，指针移动了几个字节" class="headerlink" title="如果指针执行++操作，指针移动了几个字节"></a>如果指针执行++操作，指针移动了几个字节</h2><h2 id="指针执行-操作时，它会移动-sizeof-所指类型-个字节。"><a href="#指针执行-操作时，它会移动-sizeof-所指类型-个字节。" class="headerlink" title="指针执行 ++ 操作时，它会移动**sizeof(所指类型)**个字节。"></a>指针执行 ++ 操作时，它会移动**sizeof(所指类型)**个字节。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *p_int;<br><span class="hljs-type">char</span> *p_char;<br><span class="hljs-type">double</span> *p_double;<br><br>p_int++;     <span class="hljs-comment">// 移动 4 字节（假设 int 是 4 字节）</span><br>p_char++;    <span class="hljs-comment">// 移动 1 字节</span><br>p_double++;  <span class="hljs-comment">// 移动 8 字节（假设 double 是 8 字节）</span><br></code></pre></td></tr></table></figure></h2><h2 id="讲一下常量指针和指针常量"><a href="#讲一下常量指针和指针常量" class="headerlink" title="讲一下常量指针和指针常量"></a>讲一下常量指针和指针常量</h2><p>常量指针（<code>const int *ptr</code>）是指<strong>指向常量的指针</strong>，不能通过指针修改值，但可以改变指针的指向；指针常量（<code>int *const ptr</code>）是指<strong>自身是常量的指针</strong>，不能改变指向，但可以通过它修改指向地址上的值；如果写成 <code>const int *const ptr</code>，则<strong>指针和它指向的数据都不能修改</strong>。</p><hr><h2 id="讲一下静态变量和静态函数"><a href="#讲一下静态变量和静态函数" class="headerlink" title="讲一下静态变量和静态函数"></a>讲一下静态变量和静态函数</h2><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><h3 id="本质与存储特性"><a href="#本质与存储特性" class="headerlink" title="本质与存储特性"></a>本质与存储特性</h3><p>在 C 语言中，使用 static 修饰的变量具备静态存储期（Static Storage Duration），即：<br>编译时分配内存，程序整个生命周期内保持存在，直到程序结束才释放。<br>它与变量的作用域无关 —— 即使定义在局部作用域中，也不会在函数退出时被销毁。</p><h4 id="作用域与可见性"><a href="#作用域与可见性" class="headerlink" title="作用域与可见性"></a>作用域与可见性</h4><p>若在函数内部声明，变量作用域仍然是该函数本地，但生命周期变成全局；<br>若在文件级作用域声明（即不在任何函数中），static 限定其链接属性为内部链接，使该变量只能在本文件中访问，防止外部符号冲突。</p><h4 id="初始化行为"><a href="#初始化行为" class="headerlink" title="初始化行为"></a>初始化行为</h4><p>静态变量在程序加载时由系统初始化（未显式赋值时默认初始化为 0）；<br>它只会在程序启动阶段初始化一次，即使函数被调用多次，也不会重复初始化。</p><h4 id="典型应用场景"><a href="#典型应用场景" class="headerlink" title="典型应用场景"></a>典型应用场景</h4><p>记忆函数执行状态或计数值（如单例、自增 ID）；<br>限制全局变量的可见性，实现模块封装；<br>在驱动开发中，维护设备状态结构体的静态引用。</p><h3 id="静态函数"><a href="#静态函数" class="headerlink" title="静态函数"></a>静态函数</h3><h4 id="本质：链接属性为内部链接"><a href="#本质：链接属性为内部链接" class="headerlink" title="本质：链接属性为内部链接"></a>本质：链接属性为内部链接</h4><p>函数默认具有外部链接性（external linkage），可以被其他文件引用（通过 extern）。<br>而 static 修饰函数后，会将其链接属性修改为 内部链接（internal linkage），即：<br>编译器在链接阶段不会将该符号导出给其他编译单元（.o 文件），只能在本文件内解析。</p><h4 id="作用域与可见性-1"><a href="#作用域与可见性-1" class="headerlink" title="作用域与可见性"></a>作用域与可见性</h4><p>静态函数的作用域限制在当前编译单元（源文件）内；<br>不能通过其他模块的 extern 声明来访问，提高封装性和模块隔离性；<br>编译器对静态函数有更多优化空间（如内联、去除未引用的函数）。</p><h4 id="典型应用场景-1"><a href="#典型应用场景-1" class="headerlink" title="典型应用场景"></a>典型应用场景</h4><p>实现模块私有函数，防止命名冲突；<br>在设备驱动、协议栈、库开发中，常用 static 函数将接口函数与实现函数解耦；<br>与 static 变量配合，实现静态私有状态封装（类比面向对象中的 private 成员）。</p><hr><h1 id="零跑BMS软件工程师"><a href="#零跑BMS软件工程师" class="headerlink" title="零跑BMS软件工程师"></a>零跑BMS软件工程师</h1><h2 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h2><p>我面的是BMS部门，对我的简历问的比较细，就问了一个八股文，经典就是这个项目背景是什么，你是怎么做的，遇到什么困难，学到什么。<br>1.你项目用到哪些驱动<br>2.你这个项目驱动是你自己写的吗<br>3.FreeRTOS是你自己移植的吗</p><h2 id="ARM内核单片机上电到main函数之前做了什么工作"><a href="#ARM内核单片机上电到main函数之前做了什么工作" class="headerlink" title="ARM内核单片机上电到main函数之前做了什么工作"></a>ARM内核单片机上电到main函数之前做了什么工作</h2><p>ARM Cortex-M 单片机上电后，核心会首先从向量表中读取初始 SP 和复位地址，进入启动代码中的 Reset_Handler。启动流程包括初始化堆栈、复制 .data 段到 RAM、清空 .bss 段、配置系统时钟（调用 SystemInit）、初始化 C&#x2F;C++ 运行环境，最终跳转到 main()。这个流程由汇编启动文件和链接脚本共同驱动，是整个系统可靠启动的基础。<br>[1] 上电复位<br>    ↓<br>[2] CPU从向量表中取复位中断地址<br>    ↓<br>[3] 进入启动文件的 Reset_Handler（汇编写的 startup.s）<br>    ↓<br>[4] 初始化堆栈指针（MSP）<br>    ↓<br>[5] 初始化 .data 段（从 Flash 拷贝到 RAM）<br>    ↓<br>[6] 清空 .bss 段（全局未初始化变量清零）<br>    ↓<br>[7] 调用 SystemInit()（配置时钟、PLL、FPU等）<br>    ↓<br>[8] 调用 C 库初始化（可能包含构造函数）<br>    ↓<br>[9] 跳转到 main() 函数</p>]]></content>
    
    
    <categories>
      
      <category>[object Object]</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华勤驱动开发面试经验</title>
    <link href="/2025/05/09/huaqin/"/>
    <url>/2025/05/09/huaqin/</url>
    
    <content type="html"><![CDATA[<h1 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h1><h2 id="1介绍项目2项目当中遇到的难点以及怎么解决的"><a href="#1介绍项目2项目当中遇到的难点以及怎么解决的" class="headerlink" title="1介绍项目2项目当中遇到的难点以及怎么解决的"></a>1介绍项目<br>2项目当中遇到的难点以及怎么解决的</h2><h1 id="介绍UART-IIC-SPI-CAN通信协议"><a href="#介绍UART-IIC-SPI-CAN通信协议" class="headerlink" title="介绍UART IIC SPI CAN通信协议"></a>介绍UART IIC SPI CAN通信协议</h1><p>详见 <a href="https://blog.csdn.net/Mr_Guan/article/details/133324610?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%9B%9B%E7%A7%8D%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-133324610.142%5Ev102%5Epc_search_result_base5&spm=1018.2226.3001.4187">https://blog.csdn.net/Mr_Guan/article/details/133324610?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E5%9B%9B%E7%A7%8D%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-133324610.142^v102^pc_search_result_base5&amp;spm=1018.2226.3001.4187</a><br>我觉得这个写的非常好。</p><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="如何避免野指针"><a href="#如何避免野指针" class="headerlink" title="如何避免野指针"></a>如何避免野指针</h2><p>声明时立即初始化： 指针变量定义时若未明确指向有效内存，应初始化为NULL。<br>动态分配后检查： 使用malloc&#x2F;new分配内存后，需检查指针是否为NULL，避免分配失败后误用。<br>释放内存后立即置空： 调用free或delete后，手动将指针置为NULL，防止成为悬挂指针。<br>不返回栈内存地址： 函数内局部变量的生命周期仅限于函数作用域，返回其地址会导致野指针。应返回动态分配内存或静态变量地址。<br>替代裸指针： std::unique_ptr（独占所有权）和std::shared_ptr（共享所有权）可自动管理内存释放，避免手动失误。</p><h2 id="指针与数组异同点"><a href="#指针与数组异同点" class="headerlink" title="指针与数组异同点"></a>指针与数组异同点</h2><h3 id="关键差异"><a href="#关键差异" class="headerlink" title="关键差异"></a>关键差异</h3><p>1内存分配方式<br>数组：在定义时分配连续的内存空间，大小固定（如 int a[5] 分配20字节）。<br>指针：是一个变量，存储的是地址，可动态指向任意内存（如 int *p &#x3D; malloc(20)）。</p><p>2类型与存储内容<br>数组：存储实际数据，数组名代表首元素地址（如 a 等价于 &amp;a[0]） 。<br>指针：存储地址数据，需通过解引用（*p）访问目标值。</p><p>3大小计算（sizeof）<br>数组：sizeof(a) 返回数组总字节数（如 int a[5] 为20字节）。<br>指针：sizeof(p) 返回指针变量大小（32位系统为4字节，64位为8字节）。</p><h3 id="相似性"><a href="#相似性" class="headerlink" title="相似性"></a>相似性</h3><p>1访问方式的互通性<br>数组可通过指针访问：a[i] 等价于 *(a + i)。<br>指针可模拟数组：p[i] 等价于 *(p + i)（需确保指针指向连续内存）。</p><p>2函数参数传递时的退化<br>数组作为函数参数时，退化为指针（如 void func(int a[]) 实际为 void func(int *a)）。</p><p>3多维数组与指针的关系<br>二维数组名可视为指向一维数组的指针（如 int (*p)[5] &#x3D; a 指向二维数组的行） 。</p><h1 id="define和typedef的异同点"><a href="#define和typedef的异同点" class="headerlink" title="#define和typedef的异同点"></a>#define和typedef的异同点</h1><p>#define预处理指令：在编译前的预处理阶段进行纯文本替换，无类型检查。可定义常量、宏函数、条件编译等，功能更广泛。<br>typedef编译阶段：为已有类型创建类型安全的别名，编译器会进行类型检查。仅用于类型别名：简化复杂类型（如结构体、函数指针）。</p><h1 id="自旋锁和互斥锁的异同点，以及对应使用场景"><a href="#自旋锁和互斥锁的异同点，以及对应使用场景" class="headerlink" title="自旋锁和互斥锁的异同点，以及对应使用场景"></a>自旋锁和互斥锁的异同点，以及对应使用场景</h1><table><thead><tr><th>特性</th><th>自旋锁（Spinlock）</th><th>互斥锁（Mutex）</th></tr></thead><tbody><tr><td>等待机制</td><td>忙等待（Busy-wait），持续检查锁状态</td><td>阻塞等待（Sleep-wait），线程挂起并释放CPU</td></tr><tr><td>CPU占用</td><td>占用CPU资源（空转）</td><td>不占用CPU（线程休眠）</td></tr><tr><td>上下文切换</td><td>无切换，延迟低</td><td>需切换线程，延迟较高（约几微秒）</td></tr><tr><td>实现原理</td><td>原子指令（如CAS、Test-And-Set）</td><td>内核调度+等待队列</td></tr><tr><td>锁持有时间</td><td>适合极短临界区（如几条指令）</td><td>适合较长临界区（如I&#x2F;O操作）</td></tr><tr><td>中断安全性</td><td>可用于中断上下文（需禁用中断防死锁）</td><td>不可用于中断（可能引发睡眠）</td></tr><tr><td>多核适用性</td><td>仅多核有效（单核忙等待无意义）</td><td>单核&#x2F;多核均适用</td></tr><tr><td>优先级反转风险</td><td>高（需配合禁用抢占）</td><td>可通过优先级继承缓解</td></tr></tbody></table><h2 id="自旋锁的典型场景"><a href="#自旋锁的典型场景" class="headerlink" title="自旋锁的典型场景"></a>自旋锁的典型场景</h2><p>短临界区：如修改标志位、计数器等极快操作，避免上下文切换开销。<br>中断上下文：内核中断处理、硬件驱动等不可睡眠的环境。<br>多核高竞争：锁竞争不激烈时，自旋锁性能优于互斥锁（如高频短时锁）。</p><h2 id="互斥锁的典型场景"><a href="#互斥锁的典型场景" class="headerlink" title="互斥锁的典型场景"></a>互斥锁的典型场景</h2><p>长临界区：涉及文件I&#x2F;O、复杂计算等耗时操作。<br>用户态线程同步：如多线程共享数据结构、数据库事务等。<br>可睡眠环境：临界区内可能调用阻塞函数（如malloc、sleep）。</p><h1 id="介绍一下内存对齐"><a href="#介绍一下内存对齐" class="headerlink" title="介绍一下内存对齐"></a>介绍一下内存对齐</h1><p>内存对齐是指数据在内存中的存储起始地址必须满足特定边界条件（如2、4、8字节的整数倍），其核心目的是提升CPU访问效率和保证硬件兼容性。<br>原理：CPU通常以固定块（如4字节）访问内存，对齐后数据可一次性读取，而非对齐数据可能需多次操作并拼接，导致性能下降甚至硬件异常（如ARM架构） 。<br>规则：结构体成员按自身大小或编译器对齐系数（如#pragma pack(n)）对齐，整体大小需为最大成员对齐值的整数倍，编译器自动插入填充字节 。<br>优化：通过调整成员顺序（如按对齐值降序排列）或显式指定对齐（如C++的alignas）可减少内存浪费，提升缓存命中率 。</p><h1 id="手撕：用C语言声明一个结构体，结构体包含常量指针和指针常量，在写一个回调函数来打印这个结构体"><a href="#手撕：用C语言声明一个结构体，结构体包含常量指针和指针常量，在写一个回调函数来打印这个结构体" class="headerlink" title="手撕：用C语言声明一个结构体，结构体包含常量指针和指针常量，在写一个回调函数来打印这个结构体"></a>手撕：用C语言声明一个结构体，结构体包含常量指针和指针常量，在写一个回调函数来打印这个结构体</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">// 定义结构体，包含常量指针和指针常量</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span>* ptr_const_value;   <span class="hljs-comment">// 常量指针（指向的值不可修改）</span><br>    <span class="hljs-type">int</span>* <span class="hljs-type">const</span> const_ptr;         <span class="hljs-comment">// 指针常量（指针本身不可修改）</span><br>    <span class="hljs-type">char</span> description[<span class="hljs-number">50</span>];         <span class="hljs-comment">// 附加描述字段</span><br>&#125; ComplexStruct;<br><br><span class="hljs-comment">// 回调函数类型定义</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*PrintCallback)</span><span class="hljs-params">(<span class="hljs-type">const</span> ComplexStruct*)</span>;<br><br><span class="hljs-comment">// 打印结构体内容的回调函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_struct</span><span class="hljs-params">(<span class="hljs-type">const</span> ComplexStruct* data)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Description: %s\n&quot;</span>, data-&gt;description);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Constant Pointer (ptr_const_value): %d\n&quot;</span>, *(data-&gt;ptr_const_value));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Pointer Constant (const_ptr): %d\n&quot;</span>, *(data-&gt;const_ptr));<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> value1 = <span class="hljs-number">42</span>;<br>    <span class="hljs-type">int</span> value2 = <span class="hljs-number">100</span>;<br><br>    <span class="hljs-comment">// 初始化结构体</span><br>    ComplexStruct my_struct = &#123;<br>        .ptr_const_value = &amp;value1,  <span class="hljs-comment">// 常量指针指向value1</span><br>        .const_ptr = &amp;value2,        <span class="hljs-comment">// 指针常量固定指向value2</span><br>        .description = <span class="hljs-string">&quot;Example of const pointer and pointer const&quot;</span><br>    &#125;;<br><br>    <span class="hljs-comment">// 通过回调函数打印结构体</span><br>    PrintCallback callback = print_struct;<br>    callback(&amp;my_struct);<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>[object Object]</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pointer</title>
    <link href="/2025/04/22/pointer/"/>
    <url>/2025/04/22/pointer/</url>
    
    <content type="html"><![CDATA[<h1 id="指针基础概念"><a href="#指针基础概念" class="headerlink" title="指针基础概念"></a>指针基础概念</h1><p>指针本质上是一个变量，其值为另一个变量的内存地址。指针提供了直接访问内存的能力，使得程序可以高效地操作数据。</p><h2 id="指针的定义与初始化"><a href="#指针的定义与初始化" class="headerlink" title="指针的定义与初始化"></a>指针的定义与初始化</h2><p>指针的定义格式为：数据类型 *指针变量名;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *p;      <span class="hljs-comment">// 定义一个指向整型的指针</span><br><span class="hljs-type">char</span> *cp;    <span class="hljs-comment">// 定义一个指向字符的指针</span><br><span class="hljs-type">float</span> *fp;   <span class="hljs-comment">// 定义一个指向浮点数的指针</span><br></code></pre></td></tr></table></figure><p>指针初始化时应该指向一个明确的地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> *p = &amp;a; <span class="hljs-comment">// p指向变量a的地址</span><br></code></pre></td></tr></table></figure><h2 id="指针的解引用"><a href="#指针的解引用" class="headerlink" title="指针的解引用"></a>指针的解引用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> *p = &amp;a;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, *p); <span class="hljs-comment">// 输出10，即a的值</span><br></code></pre></td></tr></table></figure><h2 id="指针的大小"><a href="#指针的大小" class="headerlink" title="指针的大小"></a>指针的大小</h2><p>指针的大小取决于系统架构：<br>32位系统：4字节<br>64位系统：8字节</p><hr><h1 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h1><h2 id="指针与整数加减"><a href="#指针与整数加减" class="headerlink" title="指针与整数加减"></a>指针与整数加减</h2><p>指针加减整数时，移动的字节数取决于指针指向的类型大小：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span> *p = arr;      <span class="hljs-comment">// 指向arr[0]</span><br>p = p + <span class="hljs-number">1</span>;         <span class="hljs-comment">// 现在指向arr[1]，实际地址增加了sizeof(int)字节</span><br></code></pre></td></tr></table></figure><h2 id="指针与指针相减"><a href="#指针与指针相减" class="headerlink" title="指针与指针相减"></a>指针与指针相减</h2><p>同类型指针相减，结果是它们之间相隔的元素个数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> *p1 = &amp;arr[<span class="hljs-number">0</span>];<br><span class="hljs-type">int</span> *p2 = &amp;arr[<span class="hljs-number">3</span>];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%td&quot;</span>, p2 - p1); <span class="hljs-comment">// 输出3</span><br></code></pre></td></tr></table></figure><h2 id="指针关系运算"><a href="#指针关系运算" class="headerlink" title="指针关系运算"></a>指针关系运算</h2><p>指针可以比较大小（地址高低）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(p1 &lt; p2) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p1指向的地址低于p2&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="指针的自增自减"><a href="#指针的自增自减" class="headerlink" title="指针的自增自减"></a>指针的自增自减</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>&#125;;<br><span class="hljs-type">int</span> *p = arr;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, *p++); <span class="hljs-comment">// 输出10，然后p指向arr[1]</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, (*p)++); <span class="hljs-comment">// 输出20，然后将arr[1]的值改为21</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, *++p); <span class="hljs-comment">// p先指向arr[2]，然后输出30</span><br></code></pre></td></tr></table></figure><hr><h1 id="指针与一维数组"><a href="#指针与一维数组" class="headerlink" title="指针与一维数组"></a>指针与一维数组</h1><p>数组名在大多数情况下会退化为指向数组首元素的指针</p><h2 id="数组名的本质"><a href="#数组名的本质" class="headerlink" title="数组名的本质"></a>数组名的本质</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-comment">// 以下表达式等价</span><br>arr == &amp;arr[<span class="hljs-number">0</span>]; <span class="hljs-comment">// true</span><br>*arr == arr[<span class="hljs-number">0</span>]; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="通过指针访问数组元素"><a href="#通过指针访问数组元素" class="headerlink" title="通过指针访问数组元素"></a>通过指针访问数组元素</h2><p>有四种等价方式访问数组元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span> *p = arr;<br><br><span class="hljs-comment">// 以下四种方式等价</span><br>arr[i] == *(arr + i) == p[i] == *(p + i)<br></code></pre></td></tr></table></figure><h2 id="指针遍历数组的两种方式"><a href="#指针遍历数组的两种方式" class="headerlink" title="指针遍历数组的两种方式"></a>指针遍历数组的两种方式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 方式1：指针自增，改变指针指向</span><br><span class="hljs-type">int</span> *p = arr;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *p++);<br>&#125;<br><br><span class="hljs-comment">// 方式2：指针不变，通过偏移访问</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *(p + i));<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="指针与二维数组"><a href="#指针与二维数组" class="headerlink" title="指针与二维数组"></a>指针与二维数组</h1><p>二维数组可以看作”数组的数组”，其指针操作更为复杂</p><h2 id="二维数组的地址表示"><a href="#二维数组的地址表示" class="headerlink" title="二维数组的地址表示"></a>二维数组的地址表示</h2><p>对于一个二维数组int a[3][4]：</p><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td><code>a</code></td><td>数组首地址，也是第0行的首地址务</td></tr><tr><td><code>a+i / &amp;a[i]</code></td><td>第i行的起始地址</td></tr><tr><td><code>*(a+i) / a[i]</code></td><td>第i行第0列元素的地址上</td></tr><tr><td><code>*(a+i)+j / a[i]+j / &amp;a[i][j]</code></td><td>第i行第j列元素的地址</td></tr><tr><td><code>((a+i)+j) / *(a[i]+j) / a[i][j]</code></td><td>第i行第j列元素的值</td></tr></tbody></table><h2 id="二维数组的地址表示-1"><a href="#二维数组的地址表示-1" class="headerlink" title="二维数组的地址表示"></a>二维数组的地址表示</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>];<br><span class="hljs-type">int</span> (*p)[<span class="hljs-number">4</span>] = a; <span class="hljs-comment">// p是指向含有4个元素的一维数组的指针</span><br></code></pre></td></tr></table></figure><h2 id="通过指针访问二维数组"><a href="#通过指针访问二维数组" class="headerlink" title="通过指针访问二维数组"></a>通过指针访问二维数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 方式1：使用数组指针</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">3</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">4</span>; j++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *(*(p + i) + j));<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 方式2：将二维数组视为一维数组</span><br><span class="hljs-type">int</span> *ptr = &amp;a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">12</span>; i++) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ptr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h1><p>数组指针是指向数组的指针，与指针数组完全不同</p><h2 id="数组指针的定义"><a href="#数组指针的定义" class="headerlink" title="数组指针的定义"></a>数组指针的定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> (*arr_ptr)[<span class="hljs-number">5</span>]; <span class="hljs-comment">// 指向包含5个int元素的数组的指针</span><br></code></pre></td></tr></table></figure><h2 id="数组指针的初始化"><a href="#数组指针的初始化" class="headerlink" title="数组指针的初始化"></a>数组指针的初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span> (*arr_ptr)[<span class="hljs-number">5</span>] = &amp;arr; <span class="hljs-comment">// 注意&amp;arr的类型是int(*)[5]</span><br></code></pre></td></tr></table></figure><h2 id="数组指针与二维数组"><a href="#数组指针与二维数组" class="headerlink" title="数组指针与二维数组"></a>数组指针与二维数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> matrix[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> (*ptr)[<span class="hljs-number">4</span>] = matrix; <span class="hljs-comment">// ptr指向matrix的第一行</span><br><br><span class="hljs-comment">// 通过数组指针访问二维数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">3</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">4</span>; j++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ptr[i][j]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>[object Object]</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux信号的使用</title>
    <link href="/2025/04/19/signal/"/>
    <url>/2025/04/19/signal/</url>
    
    <content type="html"><![CDATA[<h1 id="✅-信号的基本概念"><a href="#✅-信号的基本概念" class="headerlink" title="✅ 信号的基本概念"></a>✅ 信号的基本概念</h1><p>🔹定义：信号是异步事件通知机制，用于进程间通信或内核通知进程某事件发生。</p><p>🔹常见信号：</p><p>SIGINT (2)：终端中断（Ctrl+C）。</p><p>SIGKILL (9)：强制终止进程（不可捕获或忽略）。</p><p>SIGTERM (15)：请求进程终止（可处理）。</p><p>SIGSEGV (11)：段错误（非法内存访问）。</p><p>SIGCHLD (17)：子进程状态改变（如终止）。</p><p>其他：SIGQUIT、SIGALRM、SIGPIPE等。</p><hr><h1 id="✅-信号的产生方式"><a href="#✅-信号的产生方式" class="headerlink" title="✅ 信号的产生方式"></a>✅ 信号的产生方式</h1><p>🔹用户输入：如Ctrl+C（SIGINT）、Ctrl+\（SIGQUIT）。</p><p>🔹系统调用&#x2F;命令：kill()函数或kill命令发送信号。</p><p>🔹内核生成：如硬件异常（除零错误→SIGFPE）、子进程终止（SIGCHLD）。</p><hr><h1 id="✅-信号的处理"><a href="#✅-信号的处理" class="headerlink" title="✅ 信号的处理"></a>✅ 信号的处理</h1><p>🔹默认行为：终止进程（Term）、忽略（Ignore）、暂停（Stop）等。</p><p>🔹自定义处理：通过signal()或更安全的sigaction()注册处理函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigint_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span> &#123;<br>    write(STDOUT_FILENO, <span class="hljs-string">&quot;\nCaught SIGINT! Exiting...\n&quot;</span>, <span class="hljs-number">25</span>);<br>    _exit(<span class="hljs-number">0</span>);  <span class="hljs-comment">// 直接退出，避免标准库函数</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    signal(SIGINT, sigint_handler);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) sleep(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig, <span class="hljs-type">siginfo_t</span> *info, <span class="hljs-type">void</span> *ucontext)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Received signal %d from PID %d\n&quot;</span>, sig, info-&gt;si_pid);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sigaction</span> <span class="hljs-title">sa</span>;</span><br>    sa.sa_sigaction = handler;<br>    sa.sa_flags = SA_SIGINFO;  <span class="hljs-comment">// 允许携带额外信息</span><br>    sigemptyset(&amp;sa.sa_mask);  <span class="hljs-comment">// 清空信号屏蔽集</span><br><br>    <span class="hljs-keyword">if</span> (sigaction(SIGTERM, &amp;sa, <span class="hljs-literal">NULL</span>) == <span class="hljs-number">-1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;sigaction&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PID: %d\n&quot;</span>, getpid());<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) pause();  <span class="hljs-comment">// 等待信号</span><br>&#125;<br></code></pre></td></tr></table></figure><p>🔹不可捕获的信号：SIGKILL和SIGSTOP不能被捕获或忽略。</p><h1 id="✅-信号阻塞与信号集"><a href="#✅-信号阻塞与信号集" class="headerlink" title="✅ 信号阻塞与信号集"></a>✅ 信号阻塞与信号集</h1><p>🔹信号集操作：sigemptyset、sigfillset、sigaddset、sigdelset。</p><p>🔹进程信号屏蔽字：通过sigprocmask()阻塞&#x2F;解除阻塞信号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">sigset_t</span> <span class="hljs-built_in">set</span>;<br>    sigemptyset(&amp;<span class="hljs-built_in">set</span>);<br>    sigaddset(&amp;<span class="hljs-built_in">set</span>, SIGINT);  <span class="hljs-comment">// 将SIGINT加入集合</span><br>    sigprocmask(SIG_BLOCK, &amp;<span class="hljs-built_in">set</span>, <span class="hljs-literal">NULL</span>);  <span class="hljs-comment">// 阻塞SIGINT</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SIGINT is blocked. Try Ctrl+C...\n&quot;</span>);<br>    sleep(<span class="hljs-number">5</span>);<br><br>    sigprocmask(SIG_UNBLOCK, &amp;<span class="hljs-built_in">set</span>, <span class="hljs-literal">NULL</span>);  <span class="hljs-comment">// 解除阻塞</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SIGINT unblocked. Now Ctrl+C will work.\n&quot;</span>);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) sleep(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>🔹多线程：pthread_sigmask()设置线程级信号屏蔽。</p><hr><h1 id="✅-可靠信号与实时信号"><a href="#✅-可靠信号与实时信号" class="headerlink" title="✅ 可靠信号与实时信号"></a>✅ 可靠信号与实时信号</h1><p>🔹不可靠信号（1~31）：可能丢失，同种信号多次触发只处理一次。</p><h2 id="🔹实时信号（SIGRTMIN-SIGRTMAX）：支持排队，通过sigqueue-发送携带数据的信号。"><a href="#🔹实时信号（SIGRTMIN-SIGRTMAX）：支持排队，通过sigqueue-发送携带数据的信号。" class="headerlink" title="🔹实时信号（SIGRTMIN~SIGRTMAX）：支持排队，通过sigqueue()发送携带数据的信号。"></a>🔹实时信号（SIGRTMIN~SIGRTMAX）：支持排队，通过sigqueue()发送携带数据的信号。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> &#123;<br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Usage: %s &lt;PID&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-type">pid_t</span> pid = atoi(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">sigval</span> <span class="hljs-title">value</span>;</span><br>    value.sival_int = <span class="hljs-number">5678</span>;<br>    sigqueue(pid, SIGRTMIN, value);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></h2><h1 id="✅-关键函数与系统调用"><a href="#✅-关键函数与系统调用" class="headerlink" title="✅ 关键函数与系统调用"></a>✅ 关键函数与系统调用</h1><p>🔹kill()&#x2F;raise()：发送信号到进程或自身。</p><p>🔹pause()：挂起进程直到信号到达。</p><p>🔹sigsuspend()：原子操作“解除信号阻塞 + 等待信号”。</p><p>🔹alarm()&#x2F;setitimer()：设置定时器触发SIGALRM。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">alarm_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Timeout! Exiting...\n&quot;</span>);<br>    _exit(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    signal(SIGALRM, alarm_handler);<br>    alarm(<span class="hljs-number">5</span>);  <span class="hljs-comment">// 5秒后触发SIGALRM</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Waiting for input (you have 5 seconds)...\n&quot;</span>);<br>    getchar();  <span class="hljs-comment">// 若用户未输入，超时退出</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Input received.\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>🔹sigwait()：同步等待信号（多线程中常用）。</p>]]></content>
    
    
    <categories>
      
      <category>[object Object]</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux应用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 进程管理笔记</title>
    <link href="/2025/04/19/process/"/>
    <url>/2025/04/19/process/</url>
    
    <content type="html"><![CDATA[<h1 id="✅-进程基础"><a href="#✅-进程基础" class="headerlink" title="✅ 进程基础"></a>✅ 进程基础</h1><h2 id="🔹定义：​进程是正在执行的程序实例，是操作系统资源分配的基本单位。​"><a href="#🔹定义：​进程是正在执行的程序实例，是操作系统资源分配的基本单位。​" class="headerlink" title="🔹定义：​进程是正在执行的程序实例，是操作系统资源分配的基本单位。​"></a>🔹定义：​进程是正在执行的程序实例，是操作系统资源分配的基本单位。​</h2><h2 id="🔹进程控制块（PCB）：​操作系统用来管理进程的核心数据结构，包含进程状态、程序计数器、寄存器、内存管理信息、调度信息等。​"><a href="#🔹进程控制块（PCB）：​操作系统用来管理进程的核心数据结构，包含进程状态、程序计数器、寄存器、内存管理信息、调度信息等。​" class="headerlink" title="🔹进程控制块（PCB）：​操作系统用来管理进程的核心数据结构，包含进程状态、程序计数器、寄存器、内存管理信息、调度信息等。​"></a>🔹进程控制块（PCB）：​操作系统用来管理进程的核心数据结构，包含进程状态、程序计数器、寄存器、内存管理信息、调度信息等。​</h2><h2 id="🔹进程状态："><a href="#🔹进程状态：" class="headerlink" title="🔹进程状态："></a>🔹进程状态：</h2><p>就绪（Ready）：​等待 CPU 分配时间片。</p><p>运行（Running）：​正在执行。</p><p>阻塞（Blocked）：​等待某事件（如 I&#x2F;O）完成。</p><p>终止（Terminated）：​执行完成或被终止。</p><hr><h1 id="✅-进程生命周期"><a href="#✅-进程生命周期" class="headerlink" title="✅ 进程生命周期"></a>✅ 进程生命周期</h1><h2 id="🔹创建：​通过系统调用（如-fork-）创建新进程。​"><a href="#🔹创建：​通过系统调用（如-fork-）创建新进程。​" class="headerlink" title="🔹创建：​通过系统调用（如 fork()）创建新进程。​"></a>🔹创建：​通过系统调用（如 fork()）创建新进程。​</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">pid_t</span> pid;<br>pid = fork();<br><span class="hljs-keyword">switch</span> (pid) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">-1</span>:<br>perror(<span class="hljs-string">&quot;fork error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;这是子进程打印信息&lt;pid: %d, 父进程 pid: %d&gt;\n&quot;</span>,<br>getpid(), getppid());<br>_exit(<span class="hljs-number">0</span>); <span class="hljs-comment">//子进程使用_exit()退出</span><br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;这是父进程打印信息&lt;pid: %d, 子进程 pid: %d&gt;\n&quot;</span>,<br>getpid(), pid);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="🔹执行：​进程被调度执行。​"><a href="#🔹执行：​进程被调度执行。​" class="headerlink" title="🔹执行：​进程被调度执行。​"></a>🔹执行：​进程被调度执行。​</h2><h2 id="🔹终止：​通过-exit-、-exit-或父进程调用-wait-等方式终止。​"><a href="#🔹终止：​通过-exit-、-exit-或父进程调用-wait-等方式终止。​" class="headerlink" title="🔹终止：​通过 exit()、_exit() 或父进程调用 wait() 等方式终止。​"></a>🔹终止：​通过 exit()、_exit() 或父进程调用 wait() 等方式终止。​</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> status;<br><span class="hljs-type">int</span> ret;<br><span class="hljs-type">int</span> i;<br><span class="hljs-comment">/* 循环创建 3 个子进程 */</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++) &#123;<br><span class="hljs-keyword">switch</span> (fork()) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">-1</span>:<br>perror(<span class="hljs-string">&quot;fork error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-comment">/* 子进程 */</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;子进程&lt;%d&gt;被创建\n&quot;</span>, getpid());<br>sleep(i);<br>_exit(i);<br><span class="hljs-keyword">default</span>:<br><span class="hljs-comment">/* 父进程 */</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>sleep(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;~~~~~~~~~~~~~~\n&quot;</span>);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++) &#123;<br>ret = wait(&amp;status);<br><span class="hljs-keyword">if</span> (<span class="hljs-number">-1</span> == ret) &#123;<br><span class="hljs-keyword">if</span> (ECHILD == errno) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;没有需要等待回收的子进程\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>perror(<span class="hljs-string">&quot;wait error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;回收子进程&lt;%d&gt;, 终止状态&lt;%d&gt;\n&quot;</span>, ret,<br>WEXITSTATUS(status));<br>&#125;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="🔹清理：​父进程回收子进程资源，防止僵尸进程。"><a href="#🔹清理：​父进程回收子进程资源，防止僵尸进程。" class="headerlink" title="🔹清理：​父进程回收子进程资源，防止僵尸进程。"></a>🔹清理：​父进程回收子进程资源，防止僵尸进程。</h2><hr><h1 id="✅-进程间通信（IPC）"><a href="#✅-进程间通信（IPC）" class="headerlink" title="✅ 进程间通信（IPC）"></a>✅ 进程间通信（IPC）</h1><h2 id="🔹管道（Pipe）：​用于父子进程间的单向数据传输。​"><a href="#🔹管道（Pipe）：​用于父子进程间的单向数据传输。​" class="headerlink" title="🔹管道（Pipe）：​用于父子进程间的单向数据传输。​"></a>🔹管道（Pipe）：​用于父子进程间的单向数据传输。​</h2><h2 id="🔹命名管道（FIFO）：​用于无亲缘关系进程间的单向数据传输。​"><a href="#🔹命名管道（FIFO）：​用于无亲缘关系进程间的单向数据传输。​" class="headerlink" title="🔹命名管道（FIFO）：​用于无亲缘关系进程间的单向数据传输。​"></a>🔹命名管道（FIFO）：​用于无亲缘关系进程间的单向数据传输。​</h2><h2 id="🔹消息队列（Message-Queue）：​允许进程间以消息的形式交换数据。​"><a href="#🔹消息队列（Message-Queue）：​允许进程间以消息的形式交换数据。​" class="headerlink" title="🔹消息队列（Message Queue）：​允许进程间以消息的形式交换数据。​"></a>🔹消息队列（Message Queue）：​允许进程间以消息的形式交换数据。​</h2><h2 id="🔹共享内存（Shared-Memory）：​多个进程共享一块内存区域，效率高。​"><a href="#🔹共享内存（Shared-Memory）：​多个进程共享一块内存区域，效率高。​" class="headerlink" title="🔹共享内存（Shared Memory）：​多个进程共享一块内存区域，效率高。​"></a>🔹共享内存（Shared Memory）：​多个进程共享一块内存区域，效率高。​</h2><h2 id="🔹信号量（Semaphore）：​用于进程间同步与互斥控制。​"><a href="#🔹信号量（Semaphore）：​用于进程间同步与互斥控制。​" class="headerlink" title="🔹信号量（Semaphore）：​用于进程间同步与互斥控制。​"></a>🔹信号量（Semaphore）：​用于进程间同步与互斥控制。​</h2><h2 id="🔹信号（Signal）：​用于进程间的异步通知机制。"><a href="#🔹信号（Signal）：​用于进程间的异步通知机制。" class="headerlink" title="🔹信号（Signal）：​用于进程间的异步通知机制。"></a>🔹信号（Signal）：​用于进程间的异步通知机制。</h2><hr><h1 id="✅-进程间通信（IPC）-1"><a href="#✅-进程间通信（IPC）-1" class="headerlink" title="✅ 进程间通信（IPC）"></a>✅ 进程间通信（IPC）</h1><h2 id="🔹进程组（Process-Group）："><a href="#🔹进程组（Process-Group）：" class="headerlink" title="🔹进程组（Process Group）："></a>🔹进程组（Process Group）：</h2><p>​一组相关进程，共享同一进程组 ID（PGID）。​</p><h2 id="🔹会话（Session）："><a href="#🔹会话（Session）：" class="headerlink" title="🔹会话（Session）："></a>🔹会话（Session）：</h2><p>​由一个或多个进程组组成，包含一个控制终端。​</p><h2 id="🔹控制终端（Control-Terminal）："><a href="#🔹控制终端（Control-Terminal）：" class="headerlink" title="🔹控制终端（Control Terminal）："></a>🔹控制终端（Control Terminal）：</h2><p>​用于与会话中的前台进程组进行交互的终端。​</p><h2 id="🔹前台进程组："><a href="#🔹前台进程组：" class="headerlink" title="🔹前台进程组："></a>🔹前台进程组：</h2><p>​当前会话中正在控制终端上运行的进程组。​</p><h2 id="🔹后台进程："><a href="#🔹后台进程：" class="headerlink" title="🔹后台进程："></a>🔹后台进程：</h2><p>​不与控制终端交互的进程。</p><hr><h1 id="✅-其他重要概念"><a href="#✅-其他重要概念" class="headerlink" title="✅ 其他重要概念"></a>✅ 其他重要概念</h1><h2 id="🔹僵尸进程（Zombie-Process）："><a href="#🔹僵尸进程（Zombie-Process）：" class="headerlink" title="🔹僵尸进程（Zombie Process）："></a>🔹僵尸进程（Zombie Process）：</h2><p>​子进程已终止，但父进程未调用 wait()，导致其资源未被回收。​</p><h2 id="🔹孤儿进程（Orphan-Process）："><a href="#🔹孤儿进程（Orphan-Process）：" class="headerlink" title="🔹孤儿进程（Orphan Process）："></a>🔹孤儿进程（Orphan Process）：</h2><p>​父进程已终止，子进程被 init 进程收养。​</p><h2 id="🔹进程优先级（Priority）："><a href="#🔹进程优先级（Priority）：" class="headerlink" title="🔹进程优先级（Priority）："></a>🔹进程优先级（Priority）：</h2><p>​影响进程调度的因素，通常由操作系统根据进程类型和状态动态调整。</p>]]></content>
    
    
    <categories>
      
      <category>[object Object]</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux应用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>海康BSP嵌入式开发实习面试经验</title>
    <link href="/2025/04/15/hello-world/"/>
    <url>/2025/04/15/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="✅-IIC启动流程"><a href="#✅-IIC启动流程" class="headerlink" title="✅ IIC启动流程"></a>✅ IIC启动流程</h1><h2 id="I2C-启动流程概述"><a href="#I2C-启动流程概述" class="headerlink" title="I2C 启动流程概述"></a>I2C 启动流程概述</h2><ol><li><p><strong>总线空闲状态</strong>：<br>在通信开始之前，I2C总线处于空闲状态，即SDA和SCL线都处于高电平。</p></li><li><p><strong>发送启动信号（START）</strong>：<br>主设备在SCL线为高电平时，将SDA线从高电平拉低，形成启动信号。这一过程标志着通信的开始。</p></li><li><p><strong>发送设备地址和读写位</strong>：<br>启动信号后，主设备发送目标设备的地址（通常为7位）和读写位。读写位为0表示写操作，为1表示读操作。</p></li><li><p><strong>等待应答信号（ACK）</strong>：<br>从设备接收到地址和读写位后，返回一个应答信号（ACK）。如果从设备未响应，主设备可以根据需要进行重试或处理错误。</p></li><li><p><strong>数据传输</strong>：<br>主设备根据读写位的设置，开始与从设备进行数据的读写操作。每传输一个字节后，接收方返回一个应答信号。</p></li><li><p><strong>发送停止信号（STOP）</strong>：<br>数据传输完成后，主设备在SCL线为高电平时，将SDA线从低电平拉高，形成停止信号，标志着通信的结束。</p></li></ol><p>🔹 <strong>特别注意</strong>：<br>IIC信号在数据传输过程中，当<code>SCL=1</code>（高电平）时，数据线<code>SDA</code>必须保持稳定状态，不允许有电平跳变。只有在<code>SCL</code>为低电平期间，<code>SDA</code>的电平状态才允许变化。</p><hr><h1 id="✅-C语言关键字"><a href="#✅-C语言关键字" class="headerlink" title="✅ C语言关键字"></a>✅ C语言关键字</h1><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>🔹 <strong>防止编译器优化</strong>：<br>编译器可能会将变量存储在寄存器中以提高访问效率。但如果该变量的值可能被外部因素（如硬件中断、其他线程或外部设备）改变，使用<code>volatile</code>修饰的变量会强制编译器每次从内存中读取最新值。</p><p>🔹 <strong>保证顺序性</strong>：<br><code>volatile</code>修饰的变量的读写操作不会被编译器重排序，确保操作顺序与源代码一致。</p><p>🔹 <strong>硬件寄存器访问</strong>：<br>在嵌入式系统中，直接访问硬件寄存器时，使用<code>volatile</code>可确保每次访问都读取硬件的最新值。</p><p>🔹 <strong>中断服务例程（ISR）</strong>：<br>中断处理程序修改的变量需用<code>volatile</code>修饰，确保主程序读取最新值。</p><p>🔹 <strong>多线程编程</strong>：<br>多线程环境中，<code>volatile</code>可确保线程间变量的可见性（但需注意它不保证原子性）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">interrupt_handler</span><span class="hljs-params">()</span> &#123;<br>    flag = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 中断服务程序修改 flag 的值</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span> (!flag) &#123;<br>        <span class="hljs-comment">// 等待中断处理程序将 flag 设置为 1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，flag 被 volatile 修饰，确保主程序每次访问 flag 时都从内存中读取其最新值，而非使用寄存器缓存的值。</p><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>🔹 <strong>修饰局部变量：保持变量的持久性</strong><br>当 static 用于修饰局部变量时，该变量的生命周期将持续整个程序运行期间，但其作用域仍限于定义它的函数内部。​这意味着变量在函数调用之间保持其值，而不是每次调用时重新初始化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">count_calls</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Function called %d times\n&quot;</span>, ++count);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    count_calls();<br>    count_calls();<br>    count_calls();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">Function called <span class="hljs-number">1</span> times<br>Function called <span class="hljs-number">2</span> times<br>Function called <span class="hljs-number">3</span> times<br><br></code></pre></td></tr></table></figure><p>在上述代码中，count 变量在函数 count_calls 的多次调用之间保持其值，实现了对函数调用次数的统计。</p><p>🔹 <strong>修饰全局变量和函数：限制作用域</strong><br>当 static 用于修饰全局变量或函数时，它将限制该变量或函数的作用域仅限于定义它的源文件（即翻译单元）。​这意味着其他源文件无法通过 extern 关键字访问这些变量或函数，从而避免了命名冲突。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// file1.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> secret = <span class="hljs-number">42</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">show_secret</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The secret is %d\n&quot;</span>, secret);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    show_secret();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在另一个源文件中，尝试访问 secret 或 show_secret 将导致链接错误，因为它们的作用域被限制在 file1.c 中。</p><p>🔹 <strong>修饰类成员（C++）：实现类级别的共享</strong><br>在 C++ 中，static 可以用于修饰类的成员变量和成员函数，使其成为类级别的成员，而非实例级别的成员。​这意味着所有类的实例共享同一份静态成员。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// file1.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> &#123;</span><br>public:<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> count;<br><br>    Counter() &#123;<br>        ++count;<br>    &#125;<br>&#125;;<br><br><span class="hljs-type">int</span> Counter::count = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    Counter a;<br>    Counter b;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Number of Counter instances: &quot;</span> &lt;&lt; Counter::count &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">Number of Counter instances: <span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure><p>在上述代码中，count 是一个静态成员变量，所有 Counter 类的实例共享同一份 count 变量。</p><p>🔹 <strong>修饰函数参数（C99）：指定数组的最小大小</strong></p><p>在 C99 标准中，static 可以用于修饰函数参数，指定数组参数的最小大小。​这有助于编译器进行更严格的类型检查。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">process_data</span><span class="hljs-params">(<span class="hljs-type">int</span> data[<span class="hljs-type">static</span> <span class="hljs-number">10</span>])</span> &#123;<br>    <span class="hljs-comment">// 处理数据</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    process_data(arr);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在上述代码中，data 参数被声明为至少包含 10 个元素的数组，编译器将检查传递给 process_data 函数的数组是否满足这一要求。</p><hr><h1 id="✅-C语言编程题"><a href="#✅-C语言编程题" class="headerlink" title="✅ C语言编程题"></a>✅ C语言编程题</h1><h2 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h2><p>以下两个结构体分别占用多少内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span> &#123;</span><br>    <span class="hljs-type">int</span> no;       <span class="hljs-comment">//学号</span><br>    <span class="hljs-type">char</span> name;    <span class="hljs-comment">//姓名</span><br>    <span class="hljs-type">short</span> sex;    <span class="hljs-comment">//性别   </span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">teach</span> &#123;</span><br>    <span class="hljs-type">char</span> no;       <span class="hljs-comment">//学号</span><br>    <span class="hljs-type">int</span> name;    <span class="hljs-comment">//姓名</span><br>    <span class="hljs-type">short</span> sex;    <span class="hljs-comment">//性别</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><p>🔹 <strong>student内存布局分析</strong><br>no（int）：占 0-3 字节（对齐到 4 字节）。</p><p>name（char）：占 4 字节（对齐到 1 字节，无需填充）。</p><p>sex（short）：需要对齐到 2 字节，所以必须在地址 6 开始（因为地址 5 未对齐到 2）。因此，在 name（地址 4）后插入 1 字节填充（地址 5）。sex 占 6-7 字节。</p><p>总大小：0-7 共 8 字节，且 8 是最大成员 int（4 字节）的整数倍，无需末尾填充。</p><p>🔹 <strong>teach内存布局分析</strong><br>no（char）：占 0 字节（对齐到 1 字节）。</p><p>name（int）：需要对齐到 4 字节，所以必须在地址 4 开始。因此：在 no（地址 0）后插入 3 字节填充（地址 1-3）。name 占 4-7 字节。</p><p>sex（short）：占 8-9 字节（对齐到 2 字节，地址 8 已对齐）。</p><p>总大小：当前已用 0-9 共 10 字节，但结构体总大小必须是最大成员 int（4 字节）的整数倍。因此，在 sex（地址 9）后插入 2 字节填充（地址 10-11），使总大小为 12 字节（12 是 4 的倍数）。</p><h2 id="malloc（记不太清了，感觉不会这么简单）"><a href="#malloc（记不太清了，感觉不会这么简单）" class="headerlink" title="malloc（记不太清了，感觉不会这么简单）"></a>malloc（记不太清了，感觉不会这么简单）</h2><p>以下代码输出结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-keyword">if</span> (p== <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Memory allocation failed\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//返回非零值表示错误</span><br>&#125;<br>*p= <span class="hljs-number">12345</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;result = %d\n&quot;</span>, *p);<br><span class="hljs-built_in">free</span>（p);<span class="hljs-comment">//使用完毕后释放内存</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>输出 result &#x3D;12345</p><hr><h1 id="✅-FreeRTOS任务调度"><a href="#✅-FreeRTOS任务调度" class="headerlink" title="✅ FreeRTOS任务调度"></a>✅ FreeRTOS任务调度</h1><h2 id="FreeRTOS是怎么进行调度的"><a href="#FreeRTOS是怎么进行调度的" class="headerlink" title="FreeRTOS是怎么进行调度的"></a>FreeRTOS是怎么进行调度的</h2><p>FreeRTOS 的任务调度遵循优先级调度的原则，其中高优先级的任务优先执行。当任务调度器决定哪个任务运行时，它会选择优先级最高的就绪任务。<br>任务优先级<br>每个任务都具有一个优先级，优先级数值较大的任务优先级较高。任务的优先级是在创建任务时指定的，可以在运行时通过 vTaskPrioritySet() 函数动态修改任务的优先级。<br>调度器行为<br>🔹 <strong>抢占式调度</strong><br>如果高优先级任务变为就绪状态，调度器会立即中断当前正在运行的低优先级任务，切换到高优先级任务执行。<br>🔹 <strong>协作式调度</strong><br>任务在执行时不会被抢占，除非它显式地调用 taskYIELD() 或其他类似的 API 来让出 CPU 给其他任务。<br>FreeRTOS 中，任务可以通过时间片轮转的方式调度，除非某个任务被标记为“挂起”或“阻塞”，此时它不会被调度。</p><h2 id="高优先级任务一直运行会不会霸占CPU资源"><a href="#高优先级任务一直运行会不会霸占CPU资源" class="headerlink" title="高优先级任务一直运行会不会霸占CPU资源"></a>高优先级任务一直运行会不会霸占CPU资源</h2><p>如果 FreeRTOS 中的高优先级任务长时间占用 CPU 而不主动让出控制权，低优先级任务将无法获得执行机会，导致 CPU 资源被高优先级任务“霸占”。​<br>🔹 <strong>为什么高优先级任务会“霸占”CPU</strong>？**<br>在 FreeRTOS 中，任务调度遵循优先级原则：优先级高的任务优先执行。如果高优先级任务没有被挂起、阻塞或主动让出 CPU，它将持续占用 CPU，导致其他任务无法执行。<br>🔹 <strong>可能导致的问题</strong><br>任务饥饿：​低优先级任务长时间无法获得 CPU 时间，可能导致系统响应迟缓或实时性差。​<br>系统不稳定：​某些低优先级任务可能负责关键功能（如通信、数据采集等），长时间无法执行可能导致系统功能异常。<br>🔹 <strong>如何避免“霸占”CPU</strong><br>使用 vTaskDelay() 或 vTaskDelayUntil()：​让任务主动延时，释放 CPU 给其他任务。​<br>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">vTaskDelay(pdMS_TO_TICKS(<span class="hljs-number">10</span>));  <span class="hljs-comment">// 延时 10 毫秒</span><br><br></code></pre></td></tr></table></figure><p>使用 taskYIELD()：​在任务中适当位置调用，主动让出 CPU 给同优先级的其他任务。​<br>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">taskYIELD();  <span class="hljs-comment">// 主动让出 CPU</span><br></code></pre></td></tr></table></figure><p>合理设计任务优先级：​确保高优先级任务只处理紧急或实时性要求高的任务，其他任务使用较低优先级。​<br>使用互斥机制：​避免高优先级任务长时间占用共享资源，导致低优先级任务无法访问</p>]]></content>
    
    
    <categories>
      
      <category>[object Object]</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SPI,IIC,UART对比</title>
    <link href="/2025/04/15/20250416/"/>
    <url>/2025/04/15/20250416/</url>
    
    <content type="html"><![CDATA[<h1 id="I2C、SPI和UART串行通信协议对比"><a href="#I2C、SPI和UART串行通信协议对比" class="headerlink" title="I2C、SPI和UART串行通信协议对比"></a>I2C、SPI和UART串行通信协议对比</h1><h2 id="1-I2C通信"><a href="#1-I2C通信" class="headerlink" title="1. I2C通信"></a>1. <strong>I2C通信</strong></h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li><strong>多主机和多从机</strong>  </li><li><strong>两根线</strong>：SDA（数据线）和SCL（时钟线）  </li><li><strong>通信速率</strong>：100kbps（标准模式）至3.4Mbps（高速模式）  </li><li><strong>地址模式</strong>：7位或10位设备地址</li></ul><h3 id="通信时序："><a href="#通信时序：" class="headerlink" title="通信时序："></a>通信时序：</h3><ol><li><strong>起始信号</strong>：SDA从高电平拉低（SCL保持高电平）  </li><li><strong>设备地址</strong>：发送7位地址 + 读写位（0写&#x2F;1读）  </li><li><strong>数据传输</strong>：每字节后接收方返回ACK&#x2F;NACK  </li><li><strong>停止信号</strong>：SDA从低电平拉高（SCL保持高电平）</li></ol><h4 id="时序示例（发送0x12到地址0x50）："><a href="#时序示例（发送0x12到地址0x50）：" class="headerlink" title="时序示例（发送0x12到地址0x50）："></a>时序示例（发送<code>0x12</code>到地址<code>0x50</code>）：</h4><p>时间  0      1     2   3  4   5   6   7  8   9  10  11  12  13<br>       __    __   __  __  __  __  __  __  __  __  __  __<br>SDA  |  S  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |  1 |  0 |  P<br>        ↑    ↓     ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↓ ↑<br>SCL  —– ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑</p><ul><li><strong>S</strong>：起始条件  </li><li><strong>P</strong>：停止条件</li></ul><h3 id="初始化步骤："><a href="#初始化步骤：" class="headerlink" title="初始化步骤："></a>初始化步骤：</h3><ol><li>配置SDA和SCL为推挽输出  </li><li>设置时钟频率（如100kHz）  </li><li>配置设备地址和读&#x2F;写模式</li></ol><hr><h2 id="2-SPI通信"><a href="#2-SPI通信" class="headerlink" title="2. SPI通信"></a>2. <strong>SPI通信</strong></h2><h3 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h3><ul><li><strong>全双工通信</strong>  </li><li><strong>四根线</strong>：MISO、MOSI、SCLK、SS  </li><li><strong>速率</strong>：可达几Mbps  </li><li><strong>时钟控制</strong>：主设备生成时钟</li></ul><h3 id="通信时序：-1"><a href="#通信时序：-1" class="headerlink" title="通信时序："></a>通信时序：</h3><ol><li><strong>起始</strong>：SS拉低选择从机  </li><li><strong>时钟同步</strong>：SCLK由主机控制（CPOL&#x2F;CPHA配置边沿）  </li><li><strong>数据传输</strong>：MOSI发送数据，MISO接收数据  </li><li><strong>停止</strong>：SS拉高</li></ol><h4 id="时序示例（发送0x12，CPOL-0-CPHA-0）："><a href="#时序示例（发送0x12，CPOL-0-CPHA-0）：" class="headerlink" title="时序示例（发送0x12，CPOL&#x3D;0, CPHA&#x3D;0）："></a>时序示例（发送<code>0x12</code>，CPOL&#x3D;0, CPHA&#x3D;0）：</h4><p>时间  0    1  2  3  4   5   6   7   8   9   10<br>SCLK  –|–|–|–|–|–|–|–|–|–|–|–<br>MOSI   | 0  1  0  0  1  0  0  1  0  1 | (发送数据)<br>MISO   |     |  (接收数据)<br>SS     |—|——————–|—|  (选择从机)</p><ul><li>数据在SCLK上升沿采样</li></ul><h3 id="初始化步骤：-1"><a href="#初始化步骤：-1" class="headerlink" title="初始化步骤："></a>初始化步骤：</h3><ol><li>配置MISO&#x2F;MOSI&#x2F;SCLK&#x2F;SS引脚  </li><li>设置CPOL、CPHA、数据位数和速率  </li><li>定义主&#x2F;从模式</li></ol><hr><h2 id="3-UART通信"><a href="#3-UART通信" class="headerlink" title="3. UART通信"></a>3. <strong>UART通信</strong></h2><h3 id="特点：-2"><a href="#特点：-2" class="headerlink" title="特点："></a>特点：</h3><ul><li><strong>异步通信</strong>  </li><li><strong>两根线</strong>：TX（发送）和RX（接收）  </li><li><strong>速率</strong>：常见9600bps~115200bps</li></ul><h3 id="通信时序：-2"><a href="#通信时序：-2" class="headerlink" title="通信时序："></a>通信时序：</h3><ol><li><strong>起始位</strong>：TX从高电平拉低  </li><li><strong>数据位</strong>：传输8位数据（LSB优先）  </li><li><strong>停止位</strong>：TX恢复高电平</li></ol><h4 id="时序示例（发送0x12）："><a href="#时序示例（发送0x12）：" class="headerlink" title="时序示例（发送0x12）："></a>时序示例（发送<code>0x12</code>）：</h4><p>时间  0   1   2   3   4   5   6   7   8   9   10  11<br>TX    ↓  1   0   0   0   1   0   0   1   0   1   ↑ (停止位)</p><ul><li>起始位（低）→ 数据位（<code>0x12</code>&#x3D; <code>00010010</code>）→ 停止位（高）</li></ul><h3 id="初始化步骤：-2"><a href="#初始化步骤：-2" class="headerlink" title="初始化步骤："></a>初始化步骤：</h3><ol><li>配置TX&#x2F;RX引脚  </li><li>设置波特率、数据位、校验位和停止位</li></ol><hr><h2 id="4-对比总结"><a href="#4-对比总结" class="headerlink" title="4. 对比总结"></a>4. <strong>对比总结</strong></h2><table><thead><tr><th>特性</th><th>I2C</th><th>SPI</th><th>UART</th></tr></thead><tbody><tr><td><strong>线数</strong></td><td>2（SDA, SCL）</td><td>4（MISO, MOSI, SCLK, SS）</td><td>2（TX, RX）</td></tr><tr><td><strong>模式</strong></td><td>多主多从</td><td>主从全双工</td><td>异步点对点</td></tr><tr><td><strong>速率</strong></td><td>100kbps~3.4Mbps</td><td>几Mbps</td><td>9600bps~115200bps</td></tr><tr><td><strong>应用</strong></td><td>低速多设备（如传感器）</td><td>高速短距（如Flash存储器）</td><td>长距异步通信（如调试口）</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>[object Object]</category>
      
    </categories>
    
    
    <tags>
      
      <tag>裸机开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阻塞I/O笔记</title>
    <link href="/2025/04/15/20250415/"/>
    <url>/2025/04/15/20250415/</url>
    
    <content type="html"><![CDATA[<h1 id="✅-Linux-驱动中阻塞-I-O-完整流程总结"><a href="#✅-Linux-驱动中阻塞-I-O-完整流程总结" class="headerlink" title="✅ Linux 驱动中阻塞 I&#x2F;O 完整流程总结"></a>✅ Linux 驱动中阻塞 I&#x2F;O 完整流程总结</h1><hr><h2 id="📌-阶段一：初始化等待队列（设备初始化时）"><a href="#📌-阶段一：初始化等待队列（设备初始化时）" class="headerlink" title="📌 阶段一：初始化等待队列（设备初始化时）"></a>📌 阶段一：初始化等待队列（设备初始化时）</h2><p><strong>目的：</strong> 准备一个等待队列，用于后续让进程挂起&#x2F;唤醒</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">wait_queue_head_t</span> r_wait;               <span class="hljs-comment">// 声明等待队列头</span><br>init_waitqueue_head(&amp;r_wait);           <span class="hljs-comment">// 初始化等待队列</span><br></code></pre></td></tr></table></figure><hr><h2 id="📌-阶段二：用户调用-read-，驱动开始执行阻塞流程"><a href="#📌-阶段二：用户调用-read-，驱动开始执行阻塞流程" class="headerlink" title="📌 阶段二：用户调用 read()，驱动开始执行阻塞流程"></a>📌 阶段二：用户调用 <code>read()</code>，驱动开始执行阻塞流程</h2><p><strong>目的：</strong> 如果当前设备没有准备好数据，让当前进程阻塞</p><h3 id="🔹-判断是否需要阻塞"><a href="#🔹-判断是否需要阻塞" class="headerlink" title="🔹 判断是否需要阻塞"></a>🔹 判断是否需要阻塞</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (<span class="hljs-type">atomic_read</span>(&amp;releasekey) == <span class="hljs-number">0</span>)      <span class="hljs-comment">// 判断是否有事件（数据）可读</span><br></code></pre></td></tr></table></figure><h3 id="🔹-创建等待队列项（绑定当前进程）"><a href="#🔹-创建等待队列项（绑定当前进程）" class="headerlink" title="🔹 创建等待队列项（绑定当前进程）"></a>🔹 创建等待队列项（绑定当前进程）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">DECLARE_WAITQUEUE(wait, current);       <span class="hljs-comment">// 定义一个等待队列节点，指向当前进程</span><br>add_wait_queue(&amp;r_wait, &amp;wait);         <span class="hljs-comment">// 将该节点添加到等待队列中</span><br></code></pre></td></tr></table></figure><h3 id="🔹-设置当前任务状态为“可中断睡眠”"><a href="#🔹-设置当前任务状态为“可中断睡眠”" class="headerlink" title="🔹 设置当前任务状态为“可中断睡眠”"></a>🔹 设置当前任务状态为“可中断睡眠”</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">__set_current_state(TASK_INTERRUPTIBLE); <span class="hljs-comment">// 表示愿意进入睡眠状态</span><br></code></pre></td></tr></table></figure><h3 id="🔹-真正进入阻塞，放弃-CPU-控制权"><a href="#🔹-真正进入阻塞，放弃-CPU-控制权" class="headerlink" title="🔹 真正进入阻塞，放弃 CPU 控制权"></a>🔹 真正进入阻塞，放弃 CPU 控制权</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">schedule();                              <span class="hljs-comment">// 进程挂起，直到被唤醒（阻塞点）</span><br></code></pre></td></tr></table></figure><hr><h2 id="📌-阶段三：外部事件发生，驱动准备唤醒阻塞进程"><a href="#📌-阶段三：外部事件发生，驱动准备唤醒阻塞进程" class="headerlink" title="📌 阶段三：外部事件发生，驱动准备唤醒阻塞进程"></a>📌 阶段三：外部事件发生，驱动准备唤醒阻塞进程</h2><p><strong>目的：</strong> 在事件发生时唤醒之前阻塞的 <code>read()</code></p><h3 id="🔹-外部中断触发（如按键中断）"><a href="#🔹-外部中断触发（如按键中断）" class="headerlink" title="🔹 外部中断触发（如按键中断）"></a>🔹 外部中断触发（如按键中断）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">irqreturn_t</span> <span class="hljs-title function_">key0_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> irq, <span class="hljs-type">void</span> *dev_id)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">imx6uirq_dev</span> *<span class="hljs-title">dev</span> =</span> (<span class="hljs-keyword">struct</span> imx6uirq_dev *)dev_id;<br>    dev-&gt;curkeynum = <span class="hljs-number">0</span>;<br>    dev-&gt;timer.data = (<span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span>)dev_id;<br>    mod_timer(&amp;dev-&gt;timer, jiffies + msecs_to_jiffies(<span class="hljs-number">10</span>));<br>    <span class="hljs-keyword">return</span> IRQ_HANDLED;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="🔹-定时器超时，进入回调函数"><a href="#🔹-定时器超时，进入回调函数" class="headerlink" title="🔹 定时器超时，进入回调函数"></a>🔹 定时器超时，进入回调函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">timer_function</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">imx6uirq_dev</span> *<span class="hljs-title">dev</span> =</span> (<span class="hljs-keyword">struct</span> imx6uirq_dev *)arg;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">irq_keydesc</span> *<span class="hljs-title">keydesc</span> =</span> &amp;dev-&gt;irqkeydesc[dev-&gt;curkeynum];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> value = gpio_get_value(keydesc-&gt;gpio);<br><br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;keyvalue, keydesc-&gt;value2);  <span class="hljs-comment">// 按下</span><br>        <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;releasekey, <span class="hljs-number">2</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;keyvalue, <span class="hljs-number">0x80</span> | keydesc-&gt;value);  <span class="hljs-comment">// 释放</span><br>        <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;releasekey, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-type">atomic_read</span>(&amp;dev-&gt;releasekey)) &#123;<br>        wake_up_interruptible(&amp;dev-&gt;r_wait);  <span class="hljs-comment">// 唤醒等待队列</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="📌-阶段四：read-被唤醒后，恢复执行并读取数据"><a href="#📌-阶段四：read-被唤醒后，恢复执行并读取数据" class="headerlink" title="📌 阶段四：read()被唤醒后，恢复执行并读取数据"></a>📌 阶段四：<code>read()</code>被唤醒后，恢复执行并读取数据</h2><p><strong>目的：</strong> 被唤醒后完成数据读取并返回用户空间</p><h3 id="🔹-被唤醒-→-判断是否是信号中断"><a href="#🔹-被唤醒-→-判断是否是信号中断" class="headerlink" title="🔹 被唤醒 → 判断是否是信号中断"></a>🔹 被唤醒 → 判断是否是信号中断</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (signal_pending(current)) &#123;<br>    ret = -ERESTARTSYS;<br>    <span class="hljs-keyword">goto</span> wait_error;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="🔹-恢复进程状态-→-从睡眠状态转为运行"><a href="#🔹-恢复进程状态-→-从睡眠状态转为运行" class="headerlink" title="🔹 恢复进程状态 → 从睡眠状态转为运行"></a>🔹 恢复进程状态 → 从睡眠状态转为运行</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">__set_current_state(TASK_RUNNING);<br>remove_wait_queue(&amp;r_wait, &amp;wait);<br></code></pre></td></tr></table></figure><h3 id="🔹-拷贝数据返回给用户"><a href="#🔹-拷贝数据返回给用户" class="headerlink" title="🔹 拷贝数据返回给用户"></a>🔹 拷贝数据返回给用户</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">keyvalue = <span class="hljs-type">atomic_read</span>(&amp;dev-&gt;keyvalue);<br>releasekey = <span class="hljs-type">atomic_read</span>(&amp;dev-&gt;releasekey);<br><br><span class="hljs-keyword">if</span> (releasekey == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">if</span> (keyvalue &amp; <span class="hljs-number">0x80</span>) &#123;<br>        keyvalue &amp;= ~<span class="hljs-number">0x80</span>;<br>        ret = copy_to_user(buf, &amp;keyvalue, <span class="hljs-keyword">sizeof</span>(keyvalue));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">goto</span> data_error;<br>    &#125;<br>    <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;releasekey, <span class="hljs-number">0</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (releasekey == <span class="hljs-number">2</span>) &#123;<br>    ret = copy_to_user(buf, &amp;keyvalue, <span class="hljs-keyword">sizeof</span>(keyvalue));<br>    <span class="hljs-type">atomic_set</span>(&amp;dev-&gt;releasekey, <span class="hljs-number">0</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">goto</span> data_error;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="✅-补充概念说明（简洁版）"><a href="#✅-补充概念说明（简洁版）" class="headerlink" title="✅ 补充概念说明（简洁版）"></a>✅ 补充概念说明（简洁版）</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><code>wait_queue_head_t</code></td><td>等待队列头，管理一批阻塞任务</td></tr><tr><td><code>DECLARE_WAITQUEUE()</code></td><td>创建等待队列节点，指向当前进程（<code>current</code>）</td></tr><tr><td><code>add_wait_queue()</code></td><td>把节点挂到等待队列上</td></tr><tr><td><code>__set_current_state()</code></td><td>设置当前进程状态为 <code>TASK_INTERRUPTIBLE</code> 等待唤醒</td></tr><tr><td><code>schedule()</code></td><td>阻塞当前任务，进入睡眠，等待被唤醒</td></tr><tr><td><code>wake_up_interruptible()</code></td><td>唤醒队列中所有处于“可中断睡眠”的任务</td></tr></tbody></table><hr><h2 id="✅-一句话总结流程"><a href="#✅-一句话总结流程" class="headerlink" title="✅ 一句话总结流程"></a>✅ 一句话总结流程</h2><blockquote><p>用户态调用 <code>read()</code> → 驱动进入阻塞 → 外部中断触发定时器 → 定时器中唤醒任务 → <code>read()</code> 恢复执行，返回按键值。<br>&#96;&#96;&#96;</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>[object Object]</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-Linux driver</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
